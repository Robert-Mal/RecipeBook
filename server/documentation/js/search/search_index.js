var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.9","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.405,1,2.456]],["body/modules/AppModule.html",[0,1.874,1,4.773,2,1.634,3,2.25,4,2.965,5,2.965,6,3.699,7,0.022,8,3.699,9,3.437,10,3.208,11,2.574,12,1.87,13,1.87,14,0.24,15,0.215,16,0.215,17,3.474,18,3.168,19,0.478,20,0.97,21,2.179,22,1.084,23,4.081,24,4.459,25,2.379,26,3.474,27,0.651,28,4.782,29,2.965,30,2.379,31,2.965,32,2.629,33,3.474,34,2.965,35,2.965,36,2.379,37,2.629,38,1.634,39,1.87,40,2.965,41,3.474,42,3.474,43,2.379,44,2.965,45,1.361,46,3.474,47,3.474,48,4.782,49,3.474,50,3.474,51,1.579,52,3.474,53,2.113,54,4.782,55,3.474,56,3.474,57,3.474,58,3.474,59,2.965,60,3.474,61,3.474,62,3.474,63,4.782,64,3.474,65,0.24,66,0.184,67,0.014,68,0.014]],["title/modules/AuthModule.html",[0,1.405,6,2.078]],["body/modules/AuthModule.html",[0,2.042,2,1.856,3,2.452,6,4.022,7,0.022,10,2.618,11,2.805,12,2.124,13,2.124,14,0.273,15,0.244,16,0.244,18,3.019,19,0.468,20,1.102,23,4.979,24,4.697,25,2.702,30,2.702,43,2.702,44,3.367,45,1.546,65,0.273,66,0.209,67,0.015,68,0.015,69,3.367,70,3.367,71,3.367,72,4.12,73,4.157,74,3.945,75,3.269,76,3.269,77,3.945,78,3.019,79,3.945,80,5.21,81,2.702,82,3.945,83,2.986,84,3.945,85,3.945,86,3.367,87,3.945,88,3.945,89,3.945]],["title/injectables/AuthService.html",[72,2.078,90,1.252]],["body/injectables/AuthService.html",[7,0.022,14,0.242,15,0.216,16,0.216,19,0.443,20,0.977,43,2.396,45,2.507,65,0.242,66,0.186,67,0.014,68,0.014,72,2.784,78,2.027,83,2.648,90,1.678,91,1.884,92,2.986,93,0.268,94,1.883,95,4.805,96,4.805,97,1.998,98,3.499,99,3.293,100,6.554,101,0.746,102,3.499,103,2.151,104,0.968,105,0.552,106,1.297,107,4.805,108,2.084,109,3.499,110,1.883,111,2.396,112,4.805,113,1.06,114,5.489,115,3.499,116,2.261,117,1.883,118,3.637,119,2.648,120,1.883,121,2.986,122,1.646,123,2.396,124,2.986,125,2.587,126,1.5,127,2.414,128,3.499,129,3.499,130,4.101,131,2.648,132,2.029,133,2.648,134,2.986,135,2.195,136,3.499,137,2.986,138,2.027,139,3.499,140,2.986,141,3.499]],["title/classes/CreateEatingPlanInput.html",[66,0.19,142,2.078]],["body/classes/CreateEatingPlanInput.html",[7,0.022,14,0.274,15,0.245,16,0.245,19,0.405,27,0.743,38,3.041,51,1.726,65,0.274,66,0.211,67,0.015,68,0.015,93,0.304,101,0.846,104,1.031,105,0.626,106,1.236,113,1.1,142,3.03,143,0.789,144,2.533,145,5.516,146,3.003,147,1.167,148,3.149,149,3.389,150,4.993,151,1.388,152,1.941,153,2.31,154,3.967,155,3.389,156,3.967,157,3.389,158,3.967,159,3.386,160,3.581,161,3.967,162,1.806,163,2.174,164,3.386]],["title/classes/CreateRecipeInput.html",[66,0.19,165,2.078]],["body/classes/CreateRecipeInput.html",[7,0.022,14,0.211,15,0.189,16,0.189,19,0.385,27,0.571,51,2.285,65,0.211,66,0.162,67,0.013,68,0.013,93,0.234,101,0.877,104,0.899,105,0.649,106,1.635,113,1.154,117,1.71,143,0.606,147,0.974,148,2.744,149,2.953,151,1.44,152,2.013,153,3.058,155,2.953,162,1.834,163,1.815,165,2.529,166,5.603,167,2.309,168,4.35,169,4.35,170,3.491,171,4.35,172,3.858,173,3.05,174,3.05,175,3.05,176,2.744,177,3.05,178,3.05,179,3.05,180,3.05,181,3.05,182,3.05,183,2.738,184,3.05,185,3.725,186,1.914,187,2.309,188,2.309,189,2.309]],["title/classes/CreateShoppingListInput.html",[66,0.19,190,2.078]],["body/classes/CreateShoppingListInput.html",[7,0.022,14,0.312,15,0.279,16,0.279,19,0.43,27,0.845,65,0.312,66,0.239,67,0.017,68,0.017,93,0.346,101,0.772,104,1.096,105,0.572,113,1.03,143,0.896,147,1.268,151,1.268,152,1.773,162,1.737,163,2.361,170,4.258,176,3.347,183,3.562,190,3.29,191,2.925,192,5.306,193,3.347,194,3.413,195,4.508,196,4.508,197,4.508,198,3.848]],["title/classes/EatingPlan.html",[66,0.19,199,1.931]],["body/classes/EatingPlan.html",[7,0.022,14,0.212,15,0.189,16,0.189,19,0.408,22,0.956,27,0.574,51,1.84,53,2.463,65,0.353,66,0.163,67,0.013,68,0.013,93,0.235,101,0.859,104,0.901,105,0.671,106,1.034,108,0.956,113,1.105,123,2.098,126,0.956,143,0.609,144,2.53,147,0.977,148,2.75,149,2.96,150,4.36,151,1.409,152,1.367,153,1.934,155,2.96,157,3.23,162,1.764,199,2.75,200,4.05,201,2.098,202,2.002,203,3.499,204,2.567,205,1.646,206,3.063,207,3.063,208,1.775,209,3.063,210,2.319,211,2.614,212,4.378,213,3.063,214,2.998,215,2.098,216,3.063,217,2.098,218,2.098,219,3.063,220,2.06,221,2.998,222,3.063,223,2.357,224,3.553,225,2.257,226,1.775,227,2.537,228,2.098,229,0.856,230,0.81,231,2.998,232,3.063,233,2.319,234,1.775,235,1.922,236,2.098,237,2.098,238,2.098,239,2.098,240,2.098,241,2.614]],["title/modules/EatingPlanModule.html",[0,1.405,8,2.078]],["body/modules/EatingPlanModule.html",[0,2.042,2,1.856,3,2.452,7,0.022,8,4.022,9,3.568,10,2.618,11,2.805,12,2.124,13,2.124,14,0.273,15,0.244,16,0.244,18,3.019,19,0.475,20,1.102,21,2.475,22,1.232,30,2.702,32,2.986,38,2.452,39,2.124,65,0.273,66,0.209,67,0.015,68,0.015,75,3.269,76,3.269,78,3.019,104,0.696,144,1.546,199,2.124,225,1.743,240,3.568,242,3.367,243,3.945,244,3.367,245,3.367,246,3.828,247,3.945,248,2.986,249,2.702,250,2.986,251,3.568,252,3.945,253,3.568,254,3.945,255,2.702,256,3.945]],["title/classes/EatingPlanResolver.html",[66,0.19,251,2.456]],["body/classes/EatingPlanResolver.html",[7,0.022,14,0.15,15,0.134,16,0.134,19,0.431,20,0.607,27,0.407,38,2.397,39,3.138,45,2.635,65,0.15,66,0.115,67,0.01,68,0.01,93,0.167,94,1.327,97,1.408,99,2.831,101,0.766,103,2.208,104,1.1,105,0.616,106,1.331,108,1.978,110,2.114,113,0.934,116,1.594,117,2.482,119,1.646,120,2.399,122,1.023,125,1.824,126,0.679,127,2.711,132,1.995,142,3.127,143,0.432,144,2.284,148,1.824,151,1.205,199,3.534,204,1.092,205,1.594,220,1.023,229,0.607,230,0.575,246,2.905,248,1.646,249,1.489,250,1.646,251,2.32,257,1.855,258,4.162,259,3.151,260,2.412,261,4.162,262,4.162,263,2.174,264,2.174,265,2.174,266,3.552,267,1.702,268,2.564,269,2.174,270,1.855,271,2.564,272,3.388,273,2.174,274,1.26,275,2.174,276,2.53,277,2.174,278,2.174,279,2.174,280,3.385,281,2.174,282,2.174,283,2.891,284,2.174,285,1.646,286,3.557,287,1.646,288,3.151,289,1.646,290,2.32,291,1.26,292,2.564,293,2.948,294,1.646,295,1.646,296,1.17,297,1.646,298,1.26,299,1.646,300,1.646,301,1.26,302,1.497,303,3.151,304,2.174,305,2.174,306,2.564,307,2.174,308,2.174,309,2.174,310,2.174,311,2.174,312,2.174,313,1.855,314,1.855]],["title/injectables/EatingPlanService.html",[90,1.252,246,1.931]],["body/injectables/EatingPlanService.html",[7,0.022,14,0.14,15,0.126,16,0.126,19,0.38,20,0.567,22,0.634,38,1.874,39,3.297,45,2.725,51,1.315,53,0.897,65,0.14,66,0.108,67,0.009,68,0.009,90,1.122,91,1.093,93,0.156,94,1.258,97,1.335,101,0.816,103,2.352,104,1.08,105,0.604,106,1.418,108,1.83,110,2.297,113,0.66,117,2.604,120,2.352,122,0.956,125,1.093,126,1.414,127,3.077,132,2.167,142,3.182,144,2.4,149,2.623,199,3.065,202,1.561,204,2.478,205,1.962,229,0.567,230,0.537,233,1.537,246,1.729,248,1.537,249,1.391,259,2.431,260,2.308,267,2.002,268,3.015,270,2.741,274,1.861,276,2.957,280,2.84,291,1.177,292,2.431,296,1.093,301,1.177,302,0.897,315,1.734,316,2.741,317,2.741,318,2.741,319,2.741,320,2.728,321,3.101,322,2.031,323,3.101,324,2.031,325,3.212,326,2.031,327,2.031,328,2.741,329,2.031,330,3.212,331,2.031,332,2.741,333,2.031,334,2.741,335,3.212,336,2.031,337,2.031,338,2.031,339,2.2,340,2.031,341,1.537,342,2.031,343,1.537,344,1.391,345,1.391,346,2.031,347,3.094,348,3.984,349,1.734,350,2.031,351,2.431,352,3.101,353,2.741,354,2.431,355,4.932,356,1.537,357,1.537,358,2.2,359,2.031,360,3.212,361,2.431,362,2.741,363,1.734,364,2.031,365,0.897,366,2.031]],["title/interfaces/FileUpload.html",[186,2.25,367,2.25]],["body/interfaces/FileUpload.html",[7,0.021,14,0.324,15,0.289,16,0.289,19,0.324,65,0.324,67,0.017,68,0.017,93,0.359,105,0.666,113,1.187,147,1.298,186,3.648,367,2.938,368,3.545,369,3.997,370,3.997,371,5.007,372,6.615,373,5.007,374,6.615,375,4.963,376,4.788]],["title/classes/GqlAuthGuard.html",[66,0.19,298,2.078]],["body/classes/GqlAuthGuard.html",[7,0.022,14,0.324,15,0.289,16,0.289,19,0.438,20,1.308,27,0.877,65,0.324,66,0.249,67,0.017,68,0.017,81,3.207,93,0.359,94,2.279,101,0.637,103,1.835,104,0.826,105,0.471,106,1.106,110,1.835,126,1.462,132,1.732,143,0.931,298,3.369,377,4.963,378,3.997,379,5.815,380,5.815,381,5.007,382,4.683,383,3.545,384,4.683,385,4.683,386,2.938,387,4.683,388,3.997,389,3.997,390,4.683]],["title/classes/Ingredient.html",[66,0.19,176,1.931]],["body/classes/Ingredient.html",[7,0.022,14,0.28,15,0.25,16,0.25,19,0.408,22,1.263,27,0.758,51,1.748,53,2.34,65,0.408,66,0.215,67,0.016,68,0.016,93,0.31,101,0.803,104,1.041,105,0.631,106,1.251,113,1.106,126,1.263,143,0.804,147,1.182,151,1.318,153,2.34,162,1.751,176,3.179,202,1.585,208,3.421,223,2.851,224,3.63,225,2.34,226,2.343,227,3.068,230,1.069,234,2.343,391,2.77,392,5.04,393,4.47,394,4.044,395,3.704,396,4.044,397,4.044,398,3.451,399,2.537,400,3.451]],["title/classes/IngredientInput.html",[66,0.19,183,2.25]],["body/classes/IngredientInput.html",[7,0.022,14,0.308,15,0.275,16,0.275,19,0.308,27,0.834,51,1.86,65,0.308,66,0.236,67,0.017,68,0.017,93,0.342,101,0.841,104,1.09,105,0.622,106,1.331,113,1.134,143,0.885,147,1.258,151,1.38,152,1.93,153,2.49,162,1.815,163,2.343,183,3.535,392,5.276,393,4.679,395,3.878,401,3.801,402,4.453,403,4.453,404,4.453]],["title/interfaces/JwtPayload.html",[120,1.405,367,2.25]],["body/interfaces/JwtPayload.html",[7,0.021,14,0.33,15,0.295,16,0.295,19,0.407,65,0.33,67,0.017,68,0.017,93,0.366,105,0.642,113,1.057,116,3.134,120,2.306,135,4.178,138,3.859,147,1.314,205,1.884,229,1.334,230,1.262,367,2.996,368,3.615,405,4.075,406,4.075,407,4.178,408,4.075]],["title/injectables/JwtStrategy.html",[73,2.25,90,1.252]],["body/injectables/JwtStrategy.html",[7,0.022,14,0.288,15,0.257,16,0.257,19,0.454,20,1.162,24,5.09,25,2.849,45,2.346,53,1.838,65,0.288,66,0.221,67,0.016,68,0.016,73,3.384,81,2.849,86,3.55,90,1.884,91,2.239,93,0.319,94,2.114,97,1.729,101,0.734,103,2.114,104,0.951,105,0.543,106,1.275,110,1.63,117,2.114,120,2.482,121,3.55,122,1.957,132,1.538,134,4.604,302,1.838,386,2.61,409,3.55,410,5.394,411,4.16,412,4.16,413,5.394,414,4.16,415,4.16,416,4.16,417,4.16,418,3.55,419,3.55,420,4.16,421,2.849,422,4.16,423,4.16,424,4.16,425,4.16,426,4.16]],["title/classes/LoggedUserOutput.html",[66,0.19,427,2.715]],["body/classes/LoggedUserOutput.html",[7,0.021,14,0.346,15,0.309,16,0.309,19,0.346,27,0.938,65,0.346,66,0.266,67,0.018,68,0.018,93,0.384,101,0.681,105,0.504,113,1.079,140,5.56,143,0.995,147,1.352,151,1.117,152,1.563,162,1.692,223,3.261,427,4.585,428,5.17,429,4.272,430,5.005]],["title/classes/Meal.html",[66,0.19,157,2.078]],["body/classes/Meal.html",[7,0.022,14,0.249,15,0.222,16,0.222,19,0.413,22,1.122,27,0.673,51,1.973,53,2.163,65,0.385,66,0.191,67,0.014,68,0.014,93,0.276,101,0.813,104,0.981,105,0.649,106,1.156,113,1.094,126,1.122,143,0.715,144,2.45,147,1.093,151,1.334,153,2.163,157,3.225,162,1.747,205,1.445,208,2.082,214,2.461,215,2.461,217,3.352,218,3.352,220,1.691,221,3.352,223,2.635,224,3.622,225,2.459,226,2.082,227,2.836,228,2.461,229,1.004,230,0.95,231,2.461,234,2.082,235,2.254,236,3.352,238,2.461,365,1.588,395,3.492,431,2.461,432,4.75,433,4.75,434,4.75,435,3.594,436,3.594,437,3.594,438,3.594,439,2.72,440,3.067,441,3.067,442,3.067]],["title/classes/MealInput.html",[66,0.19,160,2.456]],["body/classes/MealInput.html",[7,0.022,14,0.286,15,0.256,16,0.256,19,0.372,27,0.775,51,1.774,65,0.286,66,0.22,67,0.016,68,0.016,93,0.317,101,0.859,104,1.053,105,0.636,106,1.27,113,1.133,143,0.822,144,2.567,147,1.2,151,1.411,152,1.973,153,2.375,160,3.681,162,1.83,163,2.234,205,1.587,229,1.156,230,1.093,395,3.745,432,5.095,433,5.095,434,5.095,443,3.53,444,4.136,445,4.136,446,4.136,447,4.136]],["title/classes/MealResolver.html",[66,0.19,253,2.456]],["body/classes/MealResolver.html",[7,0.022,14,0.29,15,0.259,16,0.259,19,0.44,27,0.786,45,2.355,65,0.29,66,0.223,67,0.016,68,0.016,93,0.322,94,2.125,97,1.744,101,0.738,103,2.125,104,0.956,105,0.546,106,1.282,110,1.644,117,2.125,132,1.551,143,0.834,144,2.355,151,0.937,157,3.974,164,3.581,220,1.974,253,3.715,287,3.176,289,3.176,290,3.715,302,1.854,365,2.397,421,2.874,439,3.176,448,3.581,449,4.63,450,3.581,451,3.387,452,4.196,453,4.196,454,5.424,455,4.196,456,3.581,457,4.196,458,4.196]],["title/classes/Recipe.html",[66,0.19,365,1.584]],["body/classes/Recipe.html",[7,0.022,14,0.178,15,0.159,16,0.159,19,0.38,22,0.804,27,0.482,51,2.253,53,1.703,65,0.32,66,0.137,67,0.011,68,0.011,93,0.198,101,0.884,104,0.815,105,0.676,106,1.588,108,0.804,113,1.166,123,1.763,126,0.804,143,0.512,147,0.861,148,2.488,149,2.678,151,1.451,152,1.204,153,2.969,155,2.678,162,1.816,168,3.944,169,3.944,170,3.165,171,3.944,172,3.498,176,2.762,202,1.811,203,3.165,204,2.322,205,1.515,208,3.184,210,1.949,211,2.197,214,2.64,215,1.763,217,1.763,218,1.763,220,1.814,221,2.64,223,2.076,224,3.71,225,2.042,226,1.492,227,2.234,228,1.763,229,0.719,230,0.68,234,1.492,235,1.615,236,1.763,237,1.763,238,1.763,239,1.763,365,2.042,399,2.418,459,1.763,460,2.575,461,2.575,462,2.575,463,2.575,464,2.575,465,2.575,466,2.575,467,2.575,468,2.575,469,2.575,470,2.575,471,2.575,472,1.949,473,1.763,474,2.197]],["title/modules/RecipeModule.html",[0,1.405,9,1.931]],["body/modules/RecipeModule.html",[0,2.15,2,2.009,3,2.581,7,0.022,9,3.707,10,2.756,11,2.953,12,2.299,13,2.299,14,0.295,15,0.264,16,0.264,18,2.474,19,0.468,20,1.193,21,2.679,22,1.333,30,2.924,65,0.295,66,0.227,67,0.016,68,0.016,75,3.441,76,3.441,78,3.179,104,0.753,225,1.887,255,2.924,365,1.887,441,3.644,451,3.614,473,3.757,475,3.644,476,3.644,477,3.644,478,4.27,479,3.757,480,4.27,481,3.644,482,3.232]],["title/classes/RecipeResolver.html",[66,0.19,479,2.456]],["body/classes/RecipeResolver.html",[7,0.022,14,0.16,15,0.143,16,0.143,19,0.438,20,0.645,27,0.433,45,2.662,65,0.16,66,0.123,67,0.01,68,0.01,93,0.177,94,1.391,97,1.476,99,2.894,101,0.783,103,2.257,104,1.117,105,0.626,106,1.361,108,2.006,110,2.167,111,3.587,113,0.954,116,1.67,117,1.391,119,1.748,120,2.439,122,1.086,125,1.911,126,0.721,127,2.778,132,2.045,143,0.459,151,1.234,165,3.204,204,1.16,205,1.633,220,1.086,229,0.645,230,0.61,266,3.69,271,2.687,276,2.613,283,3.029,285,1.748,286,3.673,287,1.748,288,3.273,289,1.748,290,2.431,291,1.338,293,3.044,294,1.748,295,1.748,296,1.243,297,1.748,298,1.338,299,1.748,300,1.748,301,1.338,302,1.568,303,3.273,306,1.748,313,1.97,314,1.97,365,2.935,449,3.029,450,1.97,451,2.778,479,2.431,481,1.97,482,1.748,483,1.97,484,4.323,485,3.549,486,3.549,487,4.323,488,4.323,489,2.309,490,2.309,491,2.309,492,2.309,493,2.309,494,2.309,495,2.309,496,2.309,497,2.309,498,2.309,499,3.469,500,2.309,501,2.309,502,2.309,503,2.687,504,2.309,505,2.309,506,2.309,507,2.309,508,2.309,509,2.309,510,2.309,511,2.309,512,2.309]],["title/injectables/RecipeService.html",[90,1.252,451,1.802]],["body/injectables/RecipeService.html",[7,0.022,14,0.124,15,0.111,16,0.111,19,0.4,20,0.502,22,0.561,36,1.231,37,1.361,45,2.681,51,1.394,53,0.794,65,0.124,66,0.095,67,0.009,68,0.009,90,1.017,91,0.968,93,0.138,94,1.141,97,1.211,101,0.786,103,2.265,104,1.081,105,0.582,106,1.366,108,1.757,110,2.205,113,0.608,117,2.544,120,2.265,122,0.846,125,0.968,126,1.942,127,3.262,131,1.361,132,2.138,133,2.205,149,2.688,165,3.03,172,2.205,202,1.654,204,2.331,205,1.917,229,0.502,230,0.475,259,2.205,260,2.127,267,1.845,274,1.687,276,1.977,291,1.041,296,0.968,301,1.041,302,0.794,317,2.486,318,2.486,319,2.486,320,2.514,321,2.891,323,2.891,332,2.486,334,3.603,339,1.995,341,1.361,343,1.361,344,1.231,345,1.231,347,2.91,349,1.534,351,3.759,352,2.891,354,2.205,356,1.361,357,1.361,358,2.514,361,2.205,362,2.486,363,2.486,365,2.554,371,3.196,373,2.205,376,2.205,451,1.463,472,1.361,482,1.361,499,2.648,503,2.205,513,1.534,514,2.912,515,1.797,516,1.797,517,2.912,518,1.797,519,1.797,520,2.912,521,1.797,522,2.912,523,1.797,524,1.797,525,2.912,526,1.797,527,2.912,528,1.797,529,1.797,530,1.797,531,1.797,532,1.534,533,1.534,534,1.534,535,1.534,536,3.133,537,1.361,538,1.797,539,4.238,540,2.912,541,3.603,542,2.486,543,2.486,544,2.486,545,2.486,546,2.486,547,2.486,548,2.486,549,4.222,550,1.797,551,2.486,552,4.639,553,1.797,554,2.912,555,4.222,556,1.797,557,1.797]],["title/guards/RolesGuard.html",[558,2.715,559,2.715]],["body/guards/RolesGuard.html",[7,0.022,14,0.29,15,0.259,16,0.259,19,0.416,20,1.172,51,1.385,59,3.581,65,0.29,66,0.223,67,0.016,68,0.016,90,1.895,93,0.322,94,2.125,97,1.744,101,0.738,103,2.125,104,0.956,105,0.546,106,1.282,108,1.31,110,1.644,126,1.694,132,2.006,138,2.431,155,3.143,302,1.854,381,4.81,383,3.176,407,2.632,408,3.581,421,2.874,559,4.106,560,3.581,561,6.355,562,4.196,563,6.74,564,4.196,565,5.424,566,4.196,567,3.581,568,4.196,569,5.424,570,4.196,571,4.196,572,4.196,573,4.196,574,4.196]],["title/classes/ShoppingList.html",[66,0.19,575,2.078]],["body/classes/ShoppingList.html",[7,0.022,14,0.241,15,0.215,16,0.215,19,0.428,22,1.087,27,0.652,51,1.149,53,1.538,65,0.379,66,0.185,67,0.014,68,0.014,93,0.267,101,0.841,104,0.965,105,0.671,108,1.087,113,1.024,123,2.385,126,1.087,143,0.692,147,1.069,151,1.38,152,1.495,162,1.727,170,3.75,176,3.175,191,3.006,198,2.972,202,2.145,203,3.75,204,2.751,205,1.741,208,2.017,214,3.28,215,2.385,220,2.254,221,3.28,223,2.578,224,3.417,225,2.419,226,2.017,227,2.775,228,2.385,229,0.973,230,0.92,234,2.017,235,2.184,238,2.385,239,2.385,399,3.005,575,3.172,576,4.376,577,2.385,578,3.482,579,4.673,580,3.482,581,3.482,582,3.482,583,3.482,584,2.636,585,2.385,586,2.972]],["title/modules/ShoppingListModule.html",[0,1.405,587,2.25]],["body/modules/ShoppingListModule.html",[0,2.158,2,2.021,3,2.591,7,0.022,11,2.965,12,2.312,13,2.312,14,0.297,15,0.266,16,0.266,18,2.489,19,0.459,20,1.2,21,2.694,22,1.341,65,0.297,66,0.228,67,0.016,68,0.016,75,3.454,76,3.454,104,0.757,191,2.021,193,2.965,225,1.898,255,2.942,575,2.489,585,3.771,587,4.326,588,3.666,589,3.666,590,3.666,591,4.171,592,2.694,593,4.295,594,3.771,595,4.295,596,3.666,597,3.251,598,3.251,599,4.295]],["title/classes/ShoppingListResolver.html",[66,0.19,594,2.456]],["body/classes/ShoppingListResolver.html",[7,0.022,14,0.168,15,0.15,16,0.15,19,0.436,20,0.678,27,0.455,45,2.627,65,0.168,66,0.129,67,0.011,68,0.011,93,0.186,94,1.445,97,1.01,101,0.767,103,2.21,104,1.112,105,0.608,106,1.333,108,2.11,110,2.099,113,0.611,117,2.472,120,2.648,122,1.143,127,2.692,132,1.981,135,1.523,143,0.483,151,1.196,190,3.268,191,2.759,193,2.401,205,1.666,229,0.678,230,0.642,260,2.584,271,2.792,274,1.407,276,2.682,285,1.838,286,3.771,288,3.377,290,2.526,291,1.407,293,3.361,294,1.838,295,1.838,296,1.307,297,1.838,298,1.407,299,1.838,300,1.838,301,1.407,302,1.073,303,1.838,306,2.792,421,1.663,575,3.584,591,3.268,592,3.678,594,2.526,596,2.073,597,1.838,598,1.838,600,2.073,601,4.461,602,3.689,603,4.461,604,4.461,605,2.428,606,2.428,607,2.428,608,4.461,609,2.428,610,2.428,611,3.689,612,2.428,613,2.428,614,2.428,615,2.428,616,2.428,617,3.539,618,2.428,619,2.792,620,2.428,621,2.428,622,2.428,623,2.428,624,2.428,625,2.428,626,2.428,627,2.428]],["title/injectables/ShoppingListService.html",[90,1.252,591,2.078]],["body/injectables/ShoppingListService.html",[7,0.022,14,0.167,15,0.149,16,0.149,19,0.417,20,0.673,22,0.752,45,2.623,65,0.167,66,0.128,67,0.011,68,0.011,90,1.28,91,1.296,93,0.185,94,1.436,97,1.524,101,0.765,103,2.203,104,0.991,105,0.566,106,1.329,110,2.091,117,2.466,120,2.573,122,1.133,125,1.296,126,1.549,127,2.937,132,1.974,135,3.348,190,3.387,191,2.751,193,2.874,202,0.944,204,2.23,205,1.823,220,2.334,229,0.673,230,0.636,260,2.571,267,2.23,274,1.395,276,2.389,291,1.395,296,1.296,301,1.395,302,1.064,316,3.128,320,3.039,321,3.397,323,3.397,328,3.128,339,2.51,341,1.823,343,3.359,344,1.649,345,1.649,347,3.667,352,3.851,358,1.649,361,1.823,575,3.576,584,1.823,591,2.124,592,3.667,597,1.823,598,1.823,617,3.112,619,2.775,628,2.055,629,2.408,630,2.408,631,3.666,632,2.408,633,2.408,634,2.408,635,2.408,636,2.408,637,2.408,638,2.408,639,2.408,640,2.408,641,2.408,642,3.666,643,4.438,644,5.623,645,3.788,646,4.438,647,4.438,648,2.408,649,2.408,650,2.408,651,2.408,652,2.408,653,2.408]],["title/classes/SignInInput.html",[66,0.19,654,2.456]],["body/classes/SignInInput.html",[7,0.021,14,0.328,15,0.293,16,0.293,19,0.328,27,0.889,65,0.328,66,0.252,67,0.017,68,0.017,93,0.364,101,0.797,105,0.59,113,1.152,116,2.994,143,0.943,147,1.309,151,1.309,152,1.83,162,1.777,163,2.437,654,4.015,655,4.816,656,4.049,657,4.357,658,4.744,659,4.744]],["title/classes/SignUpInput.html",[66,0.19,660,2.456]],["body/classes/SignUpInput.html",[7,0.022,14,0.312,15,0.279,16,0.279,19,0.312,27,0.845,65,0.312,66,0.239,67,0.017,68,0.017,93,0.346,101,0.845,105,0.626,113,1.179,116,2.925,143,0.896,147,1.268,151,1.388,152,1.941,162,1.823,163,2.361,655,4.94,657,4.258,660,3.889,661,3.848,662,4.706,663,4.508,664,4.508,665,4.508]],["title/classes/UpdateEatingPlanInput.html",[66,0.19,280,2.25]],["body/classes/UpdateEatingPlanInput.html",[7,0.022,14,0.325,15,0.29,16,0.29,19,0.438,27,0.88,38,2.981,65,0.325,66,0.249,67,0.017,68,0.017,93,0.36,101,0.639,105,0.473,113,0.778,142,2.722,143,0.934,144,2.283,146,3.556,147,1.301,151,1.049,152,1.467,159,4.01,162,1.628,163,2.423,202,2.482,205,1.721,229,1.313,230,1.242,267,2.361,280,3.655,292,3.556,386,2.947,666,4.973,667,3.556,668,4.698]],["title/classes/UpdateRecipeInput.html",[66,0.19,499,2.25]],["body/classes/UpdateRecipeInput.html",[7,0.022,14,0.33,15,0.295,16,0.295,19,0.441,27,0.895,65,0.33,66,0.253,67,0.017,68,0.017,93,0.366,101,0.649,105,0.481,113,0.791,143,0.949,147,1.314,151,1.066,152,1.491,162,1.644,163,2.447,165,2.767,167,3.615,202,2.5,205,1.738,229,1.334,230,1.262,267,2.399,386,2.996,499,3.692,503,3.615,667,3.615,669,5.023,670,4.775,671,4.775]],["title/classes/UpdateShoppingListInput.html",[66,0.19,617,2.25]],["body/classes/UpdateShoppingListInput.html",[7,0.022,14,0.323,15,0.289,16,0.289,19,0.437,27,0.874,65,0.323,66,0.248,67,0.017,68,0.017,93,0.358,101,0.635,105,0.47,113,0.773,143,0.928,147,1.296,151,1.042,152,1.457,162,1.621,163,2.413,190,3.363,191,2.731,193,3.4,194,3.533,202,2.475,205,1.714,229,1.304,230,1.234,267,2.345,386,2.928,617,3.641,619,3.533,667,4.393,672,4.953,673,4.668]],["title/classes/UpdateUserInput.html",[66,0.19,674,2.456]],["body/classes/UpdateUserInput.html",[7,0.022,14,0.289,15,0.258,16,0.258,19,0.374,27,0.782,51,2.222,65,0.289,66,0.221,67,0.016,68,0.016,93,0.32,101,0.815,105,0.603,113,1.115,116,2.821,117,2.118,143,0.829,147,1.206,151,1.338,152,1.871,153,2.973,162,1.772,163,2.247,185,4.612,186,2.617,187,3.158,188,3.158,189,3.158,674,3.701,675,5.412,676,3.561,677,4.538,678,5.116,679,4.172,680,4.172,681,4.172]],["title/classes/User.html",[66,0.19,108,1.12]],["body/classes/User.html",[7,0.022,14,0.203,15,0.181,16,0.181,19,0.378,22,0.914,27,0.548,51,2.231,53,1.294,65,0.345,66,0.155,67,0.012,68,0.012,93,0.225,101,0.909,105,0.68,106,1.29,108,1.809,113,1.139,116,2.344,126,0.914,138,2.886,143,0.582,147,0.946,151,1.474,152,0.914,153,2.412,162,1.619,202,1.952,203,3.411,205,1.884,208,2.455,210,2.216,217,2.902,218,2.005,223,2.281,224,3.983,225,1.872,226,1.696,227,2.455,229,0.818,230,0.774,234,1.696,235,1.836,236,2.902,237,2.005,407,3.124,579,4.251,657,3.411,662,3.77,677,3.77,678,4.251,682,2.005,683,4.981,684,4.981,685,4.981,686,2.928,687,2.928,688,2.928,689,2.928,690,5.459,691,2.928,692,2.928,693,2.928,694,2.928,695,2.928,696,2.928,697,2.928,698,2.928,699,2.216,700,2.005,701,2.499]],["title/modules/UserModule.html",[0,1.405,10,1.802]],["body/modules/UserModule.html",[0,2.016,2,1.822,3,2.421,6,2.981,7,0.022,8,2.981,9,2.77,10,3.475,11,2.77,12,2.084,13,2.084,14,0.268,15,0.239,16,0.239,18,2.981,19,0.478,20,1.082,21,2.429,22,1.209,31,3.304,32,2.931,38,1.822,39,2.084,40,3.304,65,0.268,66,0.205,67,0.015,68,0.015,75,3.228,76,3.228,78,3.569,99,3.563,104,0.683,108,1.209,193,2.084,225,1.711,239,2.652,255,2.652,587,4.135,592,2.429,700,3.524,702,3.304,703,3.304,704,3.304,705,3.872,706,3.872,707,3.872,708,3.872,709,3.304,710,4.392,711,3.872]],["title/injectables/UserService.html",[90,1.252,99,1.802]],["body/injectables/UserService.html",[7,0.022,14,0.077,15,0.069,16,0.069,19,0.395,20,0.313,22,0.349,36,0.766,37,0.847,38,0.919,39,0.602,43,0.766,45,2.645,65,0.077,66,0.059,67,0.006,68,0.006,72,2.566,78,0.648,90,0.682,91,0.602,93,0.086,94,0.765,97,0.812,99,0.981,101,0.764,103,2.2,104,0.99,105,0.565,106,1.327,108,1.968,110,2.162,111,1.338,113,0.914,116,2.356,117,2.416,118,1.478,120,2.35,122,0.527,124,0.955,125,1.676,126,2.004,127,3.258,130,0.955,131,0.847,132,2.168,133,0.847,135,3.035,137,1.667,155,1.132,199,2.09,200,0.702,202,1.018,205,1.835,220,1.965,229,0.313,230,0.296,246,2.249,249,0.766,250,0.847,260,1.132,267,0.981,268,1.967,274,1.132,276,2.695,296,0.602,302,1.376,320,1.338,321,1.338,323,2.132,339,1.338,344,0.766,345,0.766,347,3.8,351,1.967,352,4.108,353,1.667,354,0.847,356,0.847,357,0.847,365,1.715,371,1.478,373,0.847,376,0.847,395,0.702,439,0.847,451,2.099,456,0.955,532,0.955,533,0.955,534,0.955,535,0.955,536,1.667,537,0.847,539,2.218,541,1.667,542,0.955,543,0.955,544,0.955,545,0.955,546,0.955,547,0.955,548,0.955,551,1.667,645,4.708,654,2.132,657,1.78,660,2.659,662,0.847,674,2.861,677,0.847,699,0.847,709,0.955,712,0.955,713,1.953,714,1.953,715,1.953,716,1.953,717,1.953,718,1.953,719,2.599,720,2.599,721,1.953,722,2.599,723,2.599,724,1.119,725,1.119,726,1.953,727,1.953,728,1.119,729,1.953,730,1.119,731,1.119,732,1.953,733,1.119,734,1.953,735,1.119,736,1.953,737,1.119,738,1.119,739,1.119,740,1.119,741,1.119,742,1.119,743,3.533,744,1.119,745,1.119,746,3.882,747,1.119,748,1.119,749,1.953,750,1.119,751,1.119,752,1.119,753,1.119,754,1.119,755,1.953,756,1.119,757,1.119,758,1.119,759,1.953,760,1.119,761,1.119,762,1.119,763,1.119,764,1.119,765,1.953,766,3.882,767,1.953,768,1.119,769,1.119,770,1.119,771,1.119,772,1.119,773,1.953,774,1.119,775,1.119,776,3.113,777,1.119,778,4.838,779,1.119,780,1.119,781,1.119,782,1.119,783,1.119,784,4.177,785,3.113,786,1.953,787,1.953,788,1.119,789,1.119,790,1.953,791,1.953,792,3.113,793,1.119,794,1.119,795,3.882,796,1.119,797,1.953,798,1.119,799,1.119,800,1.119,801,1.119,802,1.119,803,1.119,804,1.119,805,1.119,806,3.113,807,1.953,808,1.953,809,1.953,810,1.119,811,1.119,812,1.119,813,1.119,814,1.953,815,1.119,816,1.119,817,1.119]],["title/coverage.html",[818,3.699]],["body/coverage.html",[7,0.022,16,0.162,38,1.836,39,2.101,66,0.377,67,0.011,68,0.011,72,1.516,73,1.641,90,2.027,92,2.233,99,1.315,105,0.263,108,0.817,120,1.025,138,1.516,142,1.516,144,2.519,145,2.233,146,2.954,157,1.516,160,1.792,165,1.516,166,2.233,167,2.954,176,1.409,183,1.641,186,1.641,190,1.516,191,2.73,192,2.233,193,2.101,194,2.954,199,1.409,200,2.448,201,2.672,231,1.792,240,1.792,246,1.409,251,1.792,253,1.792,257,2.233,280,1.641,293,1.641,298,1.516,315,2.233,347,1.641,365,1.156,367,2.448,369,2.233,370,2.233,375,2.233,377,2.233,378,2.233,391,2.672,399,1.641,401,2.233,405,2.233,406,2.233,409,2.233,427,1.981,428,2.233,429,2.233,431,2.672,443,2.233,448,2.233,451,1.315,459,2.672,473,1.792,479,1.792,483,2.233,499,1.641,513,2.233,558,1.981,559,1.981,560,2.233,575,1.516,576,2.672,577,2.672,585,1.792,591,1.516,592,2.448,594,1.792,600,2.233,617,1.641,628,2.233,654,1.792,655,2.954,656,2.233,660,1.792,661,2.233,666,2.233,669,2.233,672,2.233,674,1.792,675,2.233,676,2.233,682,2.672,700,1.792,710,2.233,712,2.233,818,1.981,819,2.616,820,2.616,821,2.616,822,7.333,823,5.802,824,2.233,825,2.233,826,6.178,827,6.315,828,2.233,829,5.533,830,5.533,831,5.172,832,4.666,833,3.902,834,2.233,835,2.233,836,2.616,837,3.902,838,2.616,839,3.902,840,2.616,841,2.616,842,2.616,843,2.616,844,2.616]],["title/dependencies.html",[3,2.029,845,2.559]],["body/dependencies.html",[3,1.974,7,0.022,20,1.172,22,1.31,25,2.874,27,0.786,29,3.581,34,3.581,35,3.581,66,0.288,67,0.016,68,0.016,81,2.874,83,3.176,118,3.176,187,4.106,188,3.176,189,3.176,229,1.172,230,1.109,418,5.13,419,3.581,537,3.176,567,3.581,846,4.196,847,6.74,848,4.196,849,4.196,850,4.196,851,4.196,852,4.196,853,5.424,854,4.196,855,4.196,856,4.196,857,4.196,858,4.196,859,4.196,860,3.581,861,4.196,862,4.196,863,4.196,864,4.196,865,4.196,866,4.196,867,4.196,868,4.196,869,4.196,870,4.196,871,4.196,872,4.196,873,4.196,874,4.196,875,4.196,876,4.196,877,4.196,878,4.196,879,4.196,880,4.196]],["title/miscellaneous/enumerations.html",[881,1.506,882,3.679]],["body/miscellaneous/enumerations.html",[7,0.02,67,0.019,68,0.019,93,0.417,108,1.987,407,3.992,881,2.732,882,4.64,883,5.436,884,5.436,885,5.431,886,6.363]],["title/miscellaneous/functions.html",[881,1.506,887,3.679]],["body/miscellaneous/functions.html",[7,0.019,67,0.019,68,0.019,93,0.428,834,4.765,835,5.821,881,2.805,887,4.765,888,5.583]],["title/index.html",[93,0.23,889,2.998,890,2.998]],["body/index.html",[7,0.021,15,0.261,36,2.89,67,0.016,68,0.016,148,2.272,393,3.195,818,3.195,860,3.602,891,4.22,892,4.22,893,5.445,894,4.22,895,4.22,896,4.22,897,4.22,898,4.22,899,6.028,900,4.22,901,4.22,902,4.22,903,4.22,904,6.868,905,4.22,906,4.22,907,4.22,908,6.75,909,4.22,910,4.22,911,5.445,912,4.22,913,4.22,914,4.22,915,5.445,916,5.445,917,4.22,918,4.22,919,4.22,920,5.445,921,5.445,922,4.22,923,4.22,924,4.22,925,4.22,926,4.22,927,3.602,928,4.22,929,4.22,930,4.22,931,4.22,932,4.22,933,4.22,934,4.22,935,4.22,936,4.22,937,3.602,938,4.22,939,4.22,940,4.22,941,4.22,942,4.22,943,4.22,944,3.602]],["title/modules.html",[2,2.3]],["body/modules.html",[1,3.513,2,2.414,6,2.972,7,0.018,8,2.972,9,2.761,10,2.577,67,0.018,68,0.018,587,3.218,927,6.047,945,7.085,946,7.085,947,7.085]],["title/overview.html",[948,4.171]],["body/overview.html",[1,4.754,2,1.761,3,2.367,4,3.194,5,3.194,6,3.929,7,0.021,8,3.929,9,3.591,10,3.407,11,2.708,12,2.015,13,2.015,67,0.015,68,0.015,69,3.194,70,3.194,71,3.194,72,3.865,73,3.564,91,2.015,99,3.351,143,0.744,242,3.194,244,3.194,245,3.194,246,3.591,368,2.833,451,3.351,475,3.194,476,3.194,477,3.194,558,2.833,587,4.095,588,3.194,589,3.194,590,3.194,591,3.865,702,3.194,703,3.194,704,3.194,948,3.194,949,5.03,950,3.742,951,3.742,952,3.742]],["title/properties.html",[147,0.962,845,2.559]],["body/properties.html",[7,0.021,67,0.019,68,0.019,147,1.232,148,2.971,937,4.71,944,4.71,953,5.519,954,5.519,955,5.519]],["title/miscellaneous/typealiases.html",[881,1.506,956,4.311]],["body/miscellaneous/typealiases.html",[7,0.018,67,0.018,68,0.018,93,0.388,105,0.509,144,2.389,191,2.38,200,3.173,201,4.175,233,4.614,391,3.464,398,5.203,431,3.464,440,5.203,459,3.464,472,4.614,576,3.464,577,4.175,584,4.614,682,3.464,699,4.614,881,2.541,957,5.058,958,4.317,959,4.317,960,4.317,961,4.317,962,4.317,963,4.317]],["title/miscellaneous/variables.html",[881,1.506,964,3.679]],["body/miscellaneous/variables.html",[7,0.021,67,0.016,68,0.016,93,0.322,111,2.874,126,1.31,132,1.551,138,3.682,144,2.125,191,1.974,200,2.632,201,3.715,231,3.715,237,4.76,240,3.715,241,3.581,293,3.403,358,2.874,381,3.176,383,3.176,388,3.581,389,3.581,391,2.874,399,3.403,400,3.581,407,2.632,431,2.874,442,3.581,459,2.874,473,3.715,474,3.581,576,2.874,577,3.715,585,3.715,586,3.581,682,2.874,700,3.715,701,3.581,824,3.581,825,4.63,828,3.581,881,2.108,885,5.932,958,3.581,959,3.581,960,3.581,961,3.581,962,3.581,963,3.581,964,3.581,965,4.196,966,4.196,967,4.196,968,4.196,969,4.196]]],"invertedIndex":[["",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"interfaces/FileUpload.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":822,"title":{},"body":{"coverage.html":{}}}],["0.0.1",{"_index":954,"title":{},"body":{"properties.html":{}}}],["0.1.13",{"_index":876,"title":{},"body":{"dependencies.html":{}}}],["0.13.2",{"_index":866,"title":{},"body":{"dependencies.html":{}}}],["0.5.1",{"_index":864,"title":{},"body":{"dependencies.html":{}}}],["0.6.0",{"_index":870,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":827,"title":{},"body":{"coverage.html":{}}}],["0/11",{"_index":833,"title":{},"body":{"coverage.html":{}}}],["0/12",{"_index":837,"title":{},"body":{"coverage.html":{}}}],["0/17",{"_index":842,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":829,"title":{},"body":{"coverage.html":{}}}],["0/22",{"_index":841,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":830,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":823,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":831,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":838,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":839,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":832,"title":{},"body":{"coverage.html":{}}}],["0/9",{"_index":836,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":951,"title":{},"body":{"overview.html":{}}}],["1.0.0",{"_index":873,"title":{},"body":{"dependencies.html":{}}}],["10",{"_index":774,"title":{},"body":{"injectables/UserService.html":{}}}],["10.1.4",{"_index":846,"title":{},"body":{"dependencies.html":{}}}],["10.1.5",{"_index":849,"title":{},"body":{"dependencies.html":{}}}],["16.6.0",{"_index":867,"title":{},"body":{"dependencies.html":{}}}],["2",{"_index":952,"title":{},"body":{"overview.html":{}}}],["2.0.3",{"_index":868,"title":{},"body":{"dependencies.html":{}}}],["2.2.0",{"_index":848,"title":{},"body":{"dependencies.html":{}}}],["24",{"_index":950,"title":{},"body":{"overview.html":{}}}],["3.0.0",{"_index":854,"title":{},"body":{"dependencies.html":{}}}],["3.0.2",{"_index":878,"title":{},"body":{"dependencies.html":{}}}],["3.11.1",{"_index":861,"title":{},"body":{"dependencies.html":{}}}],["4.0.0",{"_index":871,"title":{},"body":{"dependencies.html":{}}}],["4.4.0",{"_index":858,"title":{},"body":{"dependencies.html":{}}}],["5.1.0",{"_index":862,"title":{},"body":{"dependencies.html":{}}}],["6",{"_index":949,"title":{},"body":{"overview.html":{}}}],["6.1.2",{"_index":856,"title":{},"body":{"dependencies.html":{}}}],["6.6.5",{"_index":869,"title":{},"body":{"dependencies.html":{}}}],["7.2.0",{"_index":880,"title":{},"body":{"dependencies.html":{}}}],["9.0.0",{"_index":847,"title":{},"body":{"dependencies.html":{}}}],["9.2.0",{"_index":851,"title":{},"body":{"dependencies.html":{}}}],["_id",{"_index":202,"title":{},"body":{"classes/EatingPlan.html":{},"injectables/EatingPlanService.html":{},"classes/Ingredient.html":{},"classes/Recipe.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["access",{"_index":362,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{}}}],["accesstoken",{"_index":140,"title":{},"body":{"injectables/AuthService.html":{},"classes/LoggedUserOutput.html":{}}}],["admin",{"_index":886,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["aliases",{"_index":957,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":771,"title":{},"body":{"injectables/UserService.html":{}}}],["amazing",{"_index":928,"title":{},"body":{"index.html":{}}}],["apollo",{"_index":859,"title":{},"body":{"dependencies.html":{}}}],["apollodriver",{"_index":28,"title":{},"body":{"modules/AppModule.html":{}}}],["app",{"_index":906,"title":{},"body":{"index.html":{}}}],["applications",{"_index":898,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["args",{"_index":285,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingListResolver.html":{}}}],["args('createeatingplaninput",{"_index":304,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["args('createrecipeinput",{"_index":504,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["args('createshoppinglistinput",{"_index":623,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["args('id",{"_index":306,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingListResolver.html":{}}}],["args('like",{"_index":308,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["args('updateeatingplaninput",{"_index":310,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["args('updaterecipeinput",{"_index":510,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["args('updateshoppinglistinput",{"_index":625,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["async",{"_index":45,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"injectables/JwtStrategy.html":{},"classes/MealResolver.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["auth.guard",{"_index":300,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingListResolver.html":{}}}],["auth.guard.ts",{"_index":378,"title":{},"body":{"classes/GqlAuthGuard.html":{},"coverage.html":{}}}],["auth.guard.ts:6",{"_index":382,"title":{},"body":{"classes/GqlAuthGuard.html":{}}}],["auth.service",{"_index":79,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["auth/auth.service",{"_index":758,"title":{},"body":{"injectables/UserService.html":{}}}],["auth/decorators/current",{"_index":294,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingListResolver.html":{}}}],["auth/enums/role.enum",{"_index":698,"title":{},"body":{"classes/User.html":{}}}],["auth/guards/gql",{"_index":299,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingListResolver.html":{}}}],["auth/interfaces/jwt",{"_index":296,"title":{},"body":{"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["authguard",{"_index":385,"title":{},"body":{"classes/GqlAuthGuard.html":{}}}],["authguard('jwt",{"_index":387,"title":{},"body":{"classes/GqlAuthGuard.html":{}}}],["authmodule",{"_index":6,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":937,"title":{},"body":{"index.html":{},"properties.html":{}}}],["authservice",{"_index":72,"title":{"injectables/AuthService.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["autoschemafile",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["avatar",{"_index":677,"title":{},"body":{"classes/UpdateUserInput.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["await",{"_index":127,"title":{},"body":{"injectables/AuthService.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["backers",{"_index":929,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":757,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('eating",{"_index":799,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('email",{"_index":770,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('recipe",{"_index":789,"title":{},"body":{"injectables/UserService.html":{}}}],["badrequestexception('username",{"_index":767,"title":{},"body":{"injectables/UserService.html":{}}}],["bcrypt",{"_index":118,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["bcrypt.compare(pass",{"_index":129,"title":{},"body":{"injectables/AuthService.html":{}}}],["bcrypt.hash(user.password",{"_index":775,"title":{},"body":{"injectables/UserService.html":{}}}],["bio",{"_index":678,"title":{},"body":{"classes/UpdateUserInput.html":{},"classes/User.html":{}}}],["boolean",{"_index":155,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/EatingPlan.html":{},"classes/Recipe.html":{},"guards/RolesGuard.html":{},"injectables/UserService.html":{}}}],["bootstrap",{"_index":835,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["browse",{"_index":947,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":945,"title":{},"body":{"modules.html":{}}}],["building",{"_index":894,"title":{},"body":{"index.html":{}}}],["canactivate",{"_index":561,"title":{},"body":{"guards/RolesGuard.html":{}}}],["canactivate(context",{"_index":565,"title":{},"body":{"guards/RolesGuard.html":{}}}],["class",{"_index":66,"title":{"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingList.html":{},"classes/ShoppingListResolver.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"injectables/JwtStrategy.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":143,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingList.html":{},"classes/ShoppingListResolver.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"overview.html":{}}}],["cluster_appmodule",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":69,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_exports",{"_index":70,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":71,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_eatingplanmodule",{"_index":242,"title":{},"body":{"modules/EatingPlanModule.html":{},"overview.html":{}}}],["cluster_eatingplanmodule_exports",{"_index":244,"title":{},"body":{"modules/EatingPlanModule.html":{},"overview.html":{}}}],["cluster_eatingplanmodule_imports",{"_index":243,"title":{},"body":{"modules/EatingPlanModule.html":{}}}],["cluster_eatingplanmodule_providers",{"_index":245,"title":{},"body":{"modules/EatingPlanModule.html":{},"overview.html":{}}}],["cluster_recipemodule",{"_index":475,"title":{},"body":{"modules/RecipeModule.html":{},"overview.html":{}}}],["cluster_recipemodule_exports",{"_index":477,"title":{},"body":{"modules/RecipeModule.html":{},"overview.html":{}}}],["cluster_recipemodule_providers",{"_index":476,"title":{},"body":{"modules/RecipeModule.html":{},"overview.html":{}}}],["cluster_shoppinglistmodule",{"_index":588,"title":{},"body":{"modules/ShoppingListModule.html":{},"overview.html":{}}}],["cluster_shoppinglistmodule_exports",{"_index":589,"title":{},"body":{"modules/ShoppingListModule.html":{},"overview.html":{}}}],["cluster_shoppinglistmodule_providers",{"_index":590,"title":{},"body":{"modules/ShoppingListModule.html":{},"overview.html":{}}}],["cluster_usermodule",{"_index":702,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_exports",{"_index":703,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["cluster_usermodule_imports",{"_index":705,"title":{},"body":{"modules/UserModule.html":{}}}],["cluster_usermodule_providers",{"_index":704,"title":{},"body":{"modules/UserModule.html":{},"overview.html":{}}}],["configmodule",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["configmodule.forroot",{"_index":41,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.get('database_uri",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_expiration",{"_index":89,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":86,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["const",{"_index":126,"title":{},"body":{"injectables/AuthService.html":{},"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"injectables/ShoppingListService.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["constructor",{"_index":97,"title":{},"body":{"injectables/AuthService.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"injectables/JwtStrategy.html":{},"classes/MealResolver.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["constructor(configservice",{"_index":411,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(eatingplanmodel",{"_index":322,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["constructor(eatingplanservice",{"_index":263,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["constructor(private",{"_index":421,"title":{},"body":{"injectables/JwtStrategy.html":{},"classes/MealResolver.html":{},"guards/RolesGuard.html":{},"classes/ShoppingListResolver.html":{}}}],["constructor(recipemodel",{"_index":515,"title":{},"body":{"injectables/RecipeService.html":{}}}],["constructor(recipeservice",{"_index":450,"title":{},"body":{"classes/MealResolver.html":{},"classes/RecipeResolver.html":{}}}],["constructor(reflector",{"_index":562,"title":{},"body":{"guards/RolesGuard.html":{}}}],["constructor(shoppinglistmodel",{"_index":629,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["constructor(shoppinglistservice",{"_index":605,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["constructor(usermodel",{"_index":724,"title":{},"body":{"injectables/UserService.html":{}}}],["constructor(userservice",{"_index":98,"title":{},"body":{"injectables/AuthService.html":{}}}],["context",{"_index":383,"title":{},"body":{"classes/GqlAuthGuard.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["context.gethandler",{"_index":571,"title":{},"body":{"guards/RolesGuard.html":{}}}],["context.switchtohttp().getrequest",{"_index":572,"title":{},"body":{"guards/RolesGuard.html":{}}}],["cors",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["coverage",{"_index":818,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":267,"title":{},"body":{"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"injectables/UserService.html":{}}}],["create(createeatingplaninput",{"_index":326,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["create(createrecipeinput",{"_index":518,"title":{},"body":{"injectables/RecipeService.html":{}}}],["create(createshoppinglistinput",{"_index":632,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["create(signupinput",{"_index":727,"title":{},"body":{"injectables/UserService.html":{}}}],["createdat",{"_index":203,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["createeatingplan",{"_index":258,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["createeatingplan(createeatingplaninput",{"_index":265,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["createeatingplaninput",{"_index":142,"title":{"classes/CreateEatingPlanInput.html":{}},"body":{"classes/CreateEatingPlanInput.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/UpdateEatingPlanInput.html":{},"coverage.html":{}}}],["createparamdecorator",{"_index":967,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createreadstream",{"_index":371,"title":{},"body":{"interfaces/FileUpload.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["createrecipe",{"_index":484,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["createrecipe(createrecipeinput",{"_index":490,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["createrecipeinput",{"_index":165,"title":{"classes/CreateRecipeInput.html":{}},"body":{"classes/CreateRecipeInput.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/UpdateRecipeInput.html":{},"coverage.html":{}}}],["createrecipeinput.thumbnail",{"_index":540,"title":{},"body":{"injectables/RecipeService.html":{}}}],["createshoppinglist",{"_index":601,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["createshoppinglist(createshoppinglistinput",{"_index":607,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["createshoppinglistinput",{"_index":190,"title":{"classes/CreateShoppingListInput.html":{}},"body":{"classes/CreateShoppingListInput.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateShoppingListInput.html":{},"coverage.html":{}}}],["createwritestream",{"_index":532,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["createwritestream(url",{"_index":547,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["credentials",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["ctx",{"_index":388,"title":{},"body":{"classes/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["ctx.getcontext().req",{"_index":390,"title":{},"body":{"classes/GqlAuthGuard.html":{}}}],["ctx.getcontext().req.user",{"_index":968,"title":{},"body":{"miscellaneous/variables.html":{}}}],["currentuser",{"_index":293,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingListResolver.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["data",{"_index":358,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"miscellaneous/variables.html":{}}}],["data).exec",{"_index":652,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["data.thumbnail",{"_index":555,"title":{},"body":{"injectables/RecipeService.html":{}}}],["date",{"_index":579,"title":{},"body":{"classes/ShoppingList.html":{},"classes/User.html":{}}}],["day",{"_index":432,"title":{},"body":{"classes/Meal.html":{},"classes/MealInput.html":{}}}],["decorators",{"_index":151,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingList.html":{},"classes/ShoppingListResolver.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{}}}],["default",{"_index":237,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Recipe.html":{},"classes/User.html":{},"miscellaneous/variables.html":{}}}],["defaultvalue",{"_index":212,"title":{},"body":{"classes/EatingPlan.html":{}}}],["defined",{"_index":101,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"injectables/JwtStrategy.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["delete",{"_index":131,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":148,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"classes/Recipe.html":{},"index.html":{},"properties.html":{}}}],["development",{"_index":907,"title":{},"body":{"index.html":{}}}],["difficulty",{"_index":168,"title":{},"body":{"classes/CreateRecipeInput.html":{},"classes/Recipe.html":{}}}],["document",{"_index":227,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Ingredient.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["documentation",{"_index":819,"title":{},"body":{"coverage.html":{}}}],["driver",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["dto/create",{"_index":291,"title":{},"body":{"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{}}}],["dto/sign",{"_index":759,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/udpate",{"_index":762,"title":{},"body":{"injectables/UserService.html":{}}}],["dto/update",{"_index":301,"title":{},"body":{"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{}}}],["e2e",{"_index":917,"title":{},"body":{"index.html":{}}}],["eating",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEatingPlanInput.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/UpdateEatingPlanInput.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["eatingplan",{"_index":199,"title":{"classes/EatingPlan.html":{}},"body":{"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["eatingplan.name",{"_index":256,"title":{},"body":{"modules/EatingPlanModule.html":{}}}],["eatingplan.save",{"_index":350,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["eatingplan.userid",{"_index":798,"title":{},"body":{"injectables/UserService.html":{}}}],["eatingplan.userid.equals(user.sub",{"_index":360,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["eatingplandocument",{"_index":233,"title":{},"body":{"classes/EatingPlan.html":{},"injectables/EatingPlanService.html":{},"miscellaneous/typealiases.html":{}}}],["eatingplanid",{"_index":743,"title":{},"body":{"injectables/UserService.html":{}}}],["eatingplanmodel",{"_index":325,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["eatingplanmodule",{"_index":8,"title":{"modules/EatingPlanModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EatingPlanModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["eatingplanresolver",{"_index":251,"title":{"classes/EatingPlanResolver.html":{}},"body":{"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"coverage.html":{}}}],["eatingplans",{"_index":272,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["eatingplanschema",{"_index":240,"title":{},"body":{"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["eatingplanservice",{"_index":246,"title":{"injectables/EatingPlanService.html":{}},"body":{"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["efficient",{"_index":895,"title":{},"body":{"index.html":{}}}],["email",{"_index":662,"title":{},"body":{"classes/SignUpInput.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["encoding",{"_index":372,"title":{},"body":{"interfaces/FileUpload.html":{}}}],["enumerations",{"_index":882,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["enums/role.enum",{"_index":408,"title":{},"body":{"interfaces/JwtPayload.html":{},"guards/RolesGuard.html":{}}}],["estimatedtime",{"_index":169,"title":{},"body":{"classes/CreateRecipeInput.html":{},"classes/Recipe.html":{}}}],["exec",{"_index":351,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["executioncontext",{"_index":381,"title":{},"body":{"classes/GqlAuthGuard.html":{},"guards/RolesGuard.html":{},"miscellaneous/variables.html":{}}}],["exist",{"_index":645,"title":{},"body":{"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["expiresin",{"_index":88,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"interfaces/FileUpload.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["exports",{"_index":76,"title":{},"body":{"modules/AuthModule.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["express",{"_index":853,"title":{},"body":{"dependencies.html":{}}}],["ext",{"_index":541,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["extends",{"_index":386,"title":{},"body":{"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{}}}],["extractjwt",{"_index":416,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":424,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":53,"title":{},"body":{"modules/AppModule.html":{},"classes/EatingPlan.html":{},"injectables/EatingPlanService.html":{},"classes/Ingredient.html":{},"injectables/JwtStrategy.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["false})@field(undefined",{"_index":211,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Recipe.html":{}}}],["field",{"_index":162,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{}}}],["field(undefined",{"_index":152,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"classes/IngredientInput.html":{},"classes/LoggedUserOutput.html":{},"classes/MealInput.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{}}}],["fieldresolverenhancers",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["file",{"_index":16,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"interfaces/FileUpload.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["filename",{"_index":373,"title":{},"body":{"interfaces/FileUpload.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["fileupload",{"_index":186,"title":{"interfaces/FileUpload.html":{}},"body":{"classes/CreateRecipeInput.html":{},"interfaces/FileUpload.html":{},"classes/UpdateUserInput.html":{},"coverage.html":{}}}],["find",{"_index":779,"title":{},"body":{"injectables/UserService.html":{}}}],["findall",{"_index":602,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["findall(@currentuser",{"_index":620,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["findall(undefined",{"_index":610,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["findallbyid",{"_index":514,"title":{},"body":{"injectables/RecipeService.html":{}}}],["findallbyid(ids",{"_index":520,"title":{},"body":{"injectables/RecipeService.html":{}}}],["findallbyuserid",{"_index":316,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/ShoppingListService.html":{}}}],["findallbyuserid(userid",{"_index":328,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/ShoppingListService.html":{}}}],["findallbyusernamelike",{"_index":713,"title":{},"body":{"injectables/UserService.html":{}}}],["findallbyusernamelike(username",{"_index":729,"title":{},"body":{"injectables/UserService.html":{}}}],["findallprivatebyuserid",{"_index":317,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{}}}],["findallprivatebyuserid(id",{"_index":330,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["findallprivatebyuserid(userid",{"_index":522,"title":{},"body":{"injectables/RecipeService.html":{}}}],["findallpublicbyid",{"_index":318,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{}}}],["findallpublicbyid(ids",{"_index":332,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{}}}],["findallpublicbyuserid",{"_index":319,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{}}}],["findallpublicbyuserid(id",{"_index":335,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["findallpublicbyuserid(userid",{"_index":525,"title":{},"body":{"injectables/RecipeService.html":{}}}],["findallpubliclike",{"_index":259,"title":{},"body":{"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{}}}],["findallpubliclike(like",{"_index":270,"title":{},"body":{"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{}}}],["findallpubliclike(name",{"_index":527,"title":{},"body":{"injectables/RecipeService.html":{}}}],["findallrecipes",{"_index":485,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["findallrecipes(@args('like",{"_index":508,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["findallrecipes(like",{"_index":492,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["findbyidandupdate(_id",{"_index":363,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{}}}],["findone",{"_index":260,"title":{},"body":{"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["findone(id",{"_index":274,"title":{},"body":{"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["findonebyusername",{"_index":714,"title":{},"body":{"injectables/UserService.html":{}}}],["findonebyusername(username",{"_index":732,"title":{},"body":{"injectables/UserService.html":{}}}],["findonerecipe",{"_index":486,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["findonerecipe(@args('id",{"_index":506,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["findonerecipe(id",{"_index":494,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["findusernamebyuserid",{"_index":715,"title":{},"body":{"injectables/UserService.html":{}}}],["findusernamebyuserid(_id",{"_index":734,"title":{},"body":{"injectables/UserService.html":{}}}],["follow",{"_index":808,"title":{},"body":{"injectables/UserService.html":{}}}],["followeduser",{"_index":814,"title":{},"body":{"injectables/UserService.html":{}}}],["followeduser._id",{"_index":817,"title":{},"body":{"injectables/UserService.html":{}}}],["followeduser._id.equals(id",{"_index":816,"title":{},"body":{"injectables/UserService.html":{}}}],["followedusers",{"_index":683,"title":{},"body":{"classes/User.html":{}}}],["followuser",{"_index":716,"title":{},"body":{"injectables/UserService.html":{}}}],["followuser(username",{"_index":736,"title":{},"body":{"injectables/UserService.html":{}}}],["forbiddenexception",{"_index":343,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{}}}],["forbiddenexception('no",{"_index":361,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{}}}],["forwardref",{"_index":78,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["found",{"_index":354,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["foundindex",{"_index":795,"title":{},"body":{"injectables/UserService.html":{}}}],["framework",{"_index":893,"title":{},"body":{"index.html":{}}}],["fs",{"_index":533,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["function",{"_index":375,"title":{},"body":{"interfaces/FileUpload.html":{},"coverage.html":{}}}],["functions",{"_index":887,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["generateusercredentials",{"_index":95,"title":{},"body":{"injectables/AuthService.html":{}}}],["generateusercredentials(user",{"_index":107,"title":{},"body":{"injectables/AuthService.html":{}}}],["getfollowedusersbyid",{"_index":717,"title":{},"body":{"injectables/UserService.html":{}}}],["getfollowedusersbyid(id",{"_index":738,"title":{},"body":{"injectables/UserService.html":{}}}],["getrequest",{"_index":379,"title":{},"body":{"classes/GqlAuthGuard.html":{}}}],["getrequest(context",{"_index":380,"title":{},"body":{"classes/GqlAuthGuard.html":{}}}],["getting",{"_index":889,"title":{"index.html":{}},"body":{}}],["gqlauthguard",{"_index":298,"title":{"classes/GqlAuthGuard.html":{}},"body":{"classes/EatingPlanResolver.html":{},"classes/GqlAuthGuard.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingListResolver.html":{},"coverage.html":{}}}],["gqlexecutioncontext",{"_index":384,"title":{},"body":{"classes/GqlAuthGuard.html":{}}}],["gqlexecutioncontext.create(context",{"_index":389,"title":{},"body":{"classes/GqlAuthGuard.html":{},"miscellaneous/variables.html":{}}}],["graphql",{"_index":187,"title":{},"body":{"classes/CreateRecipeInput.html":{},"classes/UpdateUserInput.html":{},"dependencies.html":{}}}],["graphqlmodule",{"_index":26,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlmodule.forroot",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["graphqlupload",{"_index":185,"title":{},"body":{"classes/CreateRecipeInput.html":{},"classes/UpdateUserInput.html":{}}}],["grow",{"_index":924,"title":{},"body":{"index.html":{}}}],["guard",{"_index":558,"title":{"guards/RolesGuard.html":{}},"body":{"coverage.html":{},"overview.html":{}}}],["guards",{"_index":59,"title":{},"body":{"modules/AppModule.html":{},"guards/RolesGuard.html":{}}}],["here",{"_index":934,"title":{},"body":{"index.html":{}}}],["http://localhost:5173",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["https://nestjs.com",{"_index":941,"title":{},"body":{"index.html":{}}}],["id",{"_index":276,"title":{},"body":{"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["identifier",{"_index":820,"title":{},"body":{"coverage.html":{}}}],["ids",{"_index":334,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{}}}],["ignoreexpiration",{"_index":425,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["imagename",{"_index":539,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["imagestream",{"_index":546,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["implements",{"_index":568,"title":{},"body":{"guards/RolesGuard.html":{}}}],["import",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"interfaces/FileUpload.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["imports",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["in.input",{"_index":760,"title":{},"body":{"injectables/UserService.html":{}}}],["in.input.ts",{"_index":656,"title":{},"body":{"classes/SignInInput.html":{},"coverage.html":{}}}],["in.input.ts:6",{"_index":659,"title":{},"body":{"classes/SignInInput.html":{}}}],["in.input.ts:9",{"_index":658,"title":{},"body":{"classes/SignInInput.html":{}}}],["index",{"_index":93,"title":{"index.html":{}},"body":{"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"interfaces/FileUpload.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":14,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"interfaces/FileUpload.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["ingredient",{"_index":176,"title":{"classes/Ingredient.html":{}},"body":{"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/Ingredient.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"coverage.html":{}}}],["ingredient.input",{"_index":184,"title":{},"body":{"classes/CreateRecipeInput.html":{}}}],["ingredient.schema",{"_index":471,"title":{},"body":{"classes/Recipe.html":{}}}],["ingredientdocument",{"_index":398,"title":{},"body":{"classes/Ingredient.html":{},"miscellaneous/typealiases.html":{}}}],["ingredientinput",{"_index":183,"title":{"classes/IngredientInput.html":{}},"body":{"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/IngredientInput.html":{},"coverage.html":{}}}],["ingredients",{"_index":170,"title":{},"body":{"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{}}}],["ingredientschema",{"_index":399,"title":{},"body":{"classes/Ingredient.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["inject",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["inject(forwardref",{"_index":124,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["injectable",{"_index":90,"title":{"injectables/AuthService.html":{},"injectables/EatingPlanService.html":{},"injectables/JwtStrategy.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/EatingPlanService.html":{},"injectables/JwtStrategy.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["injectables",{"_index":91,"title":{},"body":{"injectables/AuthService.html":{},"injectables/EatingPlanService.html":{},"injectables/JwtStrategy.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{},"overview.html":{}}}],["injectmodel",{"_index":345,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["injectmodel(eatingplan.name",{"_index":346,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["injectmodel(recipe.name",{"_index":538,"title":{},"body":{"injectables/RecipeService.html":{}}}],["injectmodel(shoppinglist.name",{"_index":639,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["injectmodel(user.name",{"_index":764,"title":{},"body":{"injectables/UserService.html":{}}}],["inputtype",{"_index":163,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/IngredientInput.html":{},"classes/MealInput.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{}}}],["installation",{"_index":903,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":905,"title":{},"body":{"index.html":{}}}],["instructions",{"_index":171,"title":{},"body":{"classes/CreateRecipeInput.html":{},"classes/Recipe.html":{}}}],["interface",{"_index":367,"title":{"interfaces/FileUpload.html":{},"interfaces/JwtPayload.html":{}},"body":{"interfaces/FileUpload.html":{},"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["interfaces",{"_index":368,"title":{},"body":{"interfaces/FileUpload.html":{},"interfaces/JwtPayload.html":{},"overview.html":{}}}],["interfaces/jwt",{"_index":121,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["invalid",{"_index":782,"title":{},"body":{"injectables/UserService.html":{}}}],["isalreadyfollowed",{"_index":809,"title":{},"body":{"injectables/UserService.html":{}}}],["ispublic",{"_index":149,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/EatingPlan.html":{},"injectables/EatingPlanService.html":{},"classes/Recipe.html":{},"injectables/RecipeService.html":{}}}],["issaved",{"_index":792,"title":{},"body":{"injectables/UserService.html":{}}}],["join",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{},"index.html":{}}}],["join(__dirname",{"_index":62,"title":{},"body":{"modules/AppModule.html":{}}}],["join(process.cwd",{"_index":544,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["jwt",{"_index":419,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwtfromrequest",{"_index":423,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":82,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":84,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":120,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["jwtservice",{"_index":100,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":73,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kamil",{"_index":938,"title":{},"body":{"index.html":{}}}],["license",{"_index":944,"title":{},"body":{"index.html":{},"properties.html":{}}}],["licensed",{"_index":921,"title":{},"body":{"index.html":{}}}],["list",{"_index":644,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["list.input",{"_index":619,"title":{},"body":{"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateShoppingListInput.html":{}}}],["list.input.ts",{"_index":194,"title":{},"body":{"classes/CreateShoppingListInput.html":{},"classes/UpdateShoppingListInput.html":{},"coverage.html":{}}}],["list.input.ts:10",{"_index":673,"title":{},"body":{"classes/UpdateShoppingListInput.html":{}}}],["list.input.ts:11",{"_index":195,"title":{},"body":{"classes/CreateShoppingListInput.html":{}}}],["list.input.ts:8",{"_index":196,"title":{},"body":{"classes/CreateShoppingListInput.html":{}}}],["list.module",{"_index":707,"title":{},"body":{"modules/UserModule.html":{}}}],["list.module.ts",{"_index":593,"title":{},"body":{"modules/ShoppingListModule.html":{}}}],["list.resolver",{"_index":595,"title":{},"body":{"modules/ShoppingListModule.html":{}}}],["list.resolver.ts",{"_index":600,"title":{},"body":{"classes/ShoppingListResolver.html":{},"coverage.html":{}}}],["list.resolver.ts:14",{"_index":606,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["list.resolver.ts:18",{"_index":612,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["list.resolver.ts:23",{"_index":613,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["list.resolver.ts:31",{"_index":609,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["list.resolver.ts:40",{"_index":618,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["list.resolver.ts:49",{"_index":615,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["list.schema",{"_index":598,"title":{},"body":{"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{}}}],["list.schema.ts",{"_index":577,"title":{},"body":{"classes/ShoppingList.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["list.schema.ts:16",{"_index":578,"title":{},"body":{"classes/ShoppingList.html":{}}}],["list.schema.ts:20",{"_index":582,"title":{},"body":{"classes/ShoppingList.html":{}}}],["list.schema.ts:24",{"_index":581,"title":{},"body":{"classes/ShoppingList.html":{}}}],["list.schema.ts:27",{"_index":583,"title":{},"body":{"classes/ShoppingList.html":{}}}],["list.schema.ts:30",{"_index":580,"title":{},"body":{"classes/ShoppingList.html":{}}}],["list.service",{"_index":596,"title":{},"body":{"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{}}}],["list.service.ts",{"_index":628,"title":{},"body":{"injectables/ShoppingListService.html":{},"coverage.html":{}}}],["list.service.ts:17",{"_index":630,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["list.service.ts:23",{"_index":633,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["list.service.ts:35",{"_index":635,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["list.service.ts:50",{"_index":634,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["list.service.ts:54",{"_index":637,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["list.service.ts:70",{"_index":636,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["list/dto/create",{"_index":192,"title":{},"body":{"classes/CreateShoppingListInput.html":{},"coverage.html":{}}}],["list/dto/update",{"_index":672,"title":{},"body":{"classes/UpdateShoppingListInput.html":{},"coverage.html":{}}}],["list/schemas/shopping",{"_index":576,"title":{},"body":{"classes/ShoppingList.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["list/shopping",{"_index":592,"title":{},"body":{"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["local",{"_index":872,"title":{},"body":{"dependencies.html":{}}}],["loggeduseroutput",{"_index":427,"title":{"classes/LoggedUserOutput.html":{}},"body":{"classes/LoggedUserOutput.html":{},"coverage.html":{}}}],["matching",{"_index":68,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"interfaces/FileUpload.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["meal",{"_index":157,"title":{"classes/Meal.html":{}},"body":{"classes/CreateEatingPlanInput.html":{},"classes/EatingPlan.html":{},"classes/Meal.html":{},"classes/MealResolver.html":{},"coverage.html":{}}}],["meal.input",{"_index":161,"title":{},"body":{"classes/CreateEatingPlanInput.html":{}}}],["meal.resolver",{"_index":254,"title":{},"body":{"modules/EatingPlanModule.html":{}}}],["meal.schema",{"_index":232,"title":{},"body":{"classes/EatingPlan.html":{}}}],["mealdocument",{"_index":440,"title":{},"body":{"classes/Meal.html":{},"miscellaneous/typealiases.html":{}}}],["mealinput",{"_index":160,"title":{"classes/MealInput.html":{}},"body":{"classes/CreateEatingPlanInput.html":{},"classes/MealInput.html":{},"coverage.html":{}}}],["mealresolver",{"_index":253,"title":{"classes/MealResolver.html":{}},"body":{"modules/EatingPlanModule.html":{},"classes/MealResolver.html":{},"coverage.html":{}}}],["meals",{"_index":150,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"classes/EatingPlan.html":{}}}],["mealschema",{"_index":231,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Meal.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["metadata",{"_index":875,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":94,"title":{},"body":{"injectables/AuthService.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MealResolver.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["mimecode",{"_index":374,"title":{},"body":{"interfaces/FileUpload.html":{}}}],["miscellaneous",{"_index":881,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":920,"title":{},"body":{"index.html":{}}}],["mode",{"_index":911,"title":{},"body":{"index.html":{}}}],["model",{"_index":323,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["mongoose",{"_index":230,"title":{},"body":{"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/Ingredient.html":{},"interfaces/JwtPayload.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["mongoosemodule",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forfeature",{"_index":255,"title":{},"body":{"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["mongoosemodule.forrootasync",{"_index":42,"title":{},"body":{"modules/AppModule.html":{}}}],["mongooseschema",{"_index":228,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{}}}],["mongooseschema.types.objectid",{"_index":238,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{}}}],["more",{"_index":933,"title":{},"body":{"index.html":{}}}],["mutation",{"_index":286,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingListResolver.html":{}}}],["mutation(undefined",{"_index":608,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["myśliwiec",{"_index":939,"title":{},"body":{"index.html":{}}}],["name",{"_index":104,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"injectables/JwtStrategy.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["nest",{"_index":899,"title":{},"body":{"index.html":{}}}],["nestframework",{"_index":943,"title":{},"body":{"index.html":{}}}],["nestjs/apollo",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/common",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/common/exceptions",{"_index":638,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["nestjs/config",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":567,"title":{},"body":{"guards/RolesGuard.html":{},"dependencies.html":{}}}],["nestjs/graphql",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingList.html":{},"classes/ShoppingListResolver.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"dependencies.html":{}}}],["nestjs/jwt",{"_index":83,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/mapped",{"_index":850,"title":{},"body":{"dependencies.html":{}}}],["nestjs/mongoose",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"injectables/EatingPlanService.html":{},"classes/Ingredient.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"modules/RecipeModule.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"injectables/ShoppingListService.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":81,"title":{},"body":{"modules/AuthModule.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":852,"title":{},"body":{"dependencies.html":{}}}],["nestjs/serve",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["nestjs/swagger",{"_index":855,"title":{},"body":{"dependencies.html":{}}}],["new",{"_index":347,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["node.js",{"_index":892,"title":{},"body":{"index.html":{}}}],["notfoundexception",{"_index":344,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('eating",{"_index":353,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('recipe",{"_index":551,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["notfoundexception('shopping",{"_index":643,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["notfoundexception('the",{"_index":807,"title":{},"body":{"injectables/UserService.html":{}}}],["notfoundexception('user",{"_index":778,"title":{},"body":{"injectables/UserService.html":{}}}],["npm",{"_index":904,"title":{},"body":{"index.html":{}}}],["null",{"_index":133,"title":{},"body":{"injectables/AuthService.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["nullable",{"_index":153,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/EatingPlan.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/Recipe.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{}}}],["number",{"_index":395,"title":{},"body":{"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"injectables/UserService.html":{}}}],["objecttype",{"_index":223,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Ingredient.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["open",{"_index":922,"title":{},"body":{"index.html":{}}}],["optional",{"_index":106,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"injectables/JwtStrategy.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["options",{"_index":357,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["origin",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["out",{"_index":13,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["overview",{"_index":948,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["package",{"_index":845,"title":{"dependencies.html":{},"properties.html":{}},"body":{}}],["parameters",{"_index":103,"title":{},"body":{"injectables/AuthService.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MealResolver.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["parent",{"_index":287,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/MealResolver.html":{},"classes/RecipeResolver.html":{}}}],["parse",{"_index":534,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["parse(filename",{"_index":542,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["partialtype",{"_index":667,"title":{},"body":{"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{}}}],["partialtype(createeatingplaninput",{"_index":668,"title":{},"body":{"classes/UpdateEatingPlanInput.html":{}}}],["partialtype(createrecipeinput",{"_index":671,"title":{},"body":{"classes/UpdateRecipeInput.html":{}}}],["pass",{"_index":114,"title":{},"body":{"injectables/AuthService.html":{}}}],["passport",{"_index":418,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":80,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":415,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":420,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":657,"title":{},"body":{"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["path",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["payload",{"_index":134,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":122,"title":{},"body":{"injectables/AuthService.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"injectables/JwtStrategy.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["payload.interface.ts",{"_index":406,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["permission",{"_index":647,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["plan",{"_index":268,"title":{},"body":{"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"injectables/UserService.html":{}}}],["plan.input",{"_index":292,"title":{},"body":{"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/UpdateEatingPlanInput.html":{}}}],["plan.input.ts",{"_index":146,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"classes/UpdateEatingPlanInput.html":{},"coverage.html":{}}}],["plan.input.ts:11",{"_index":154,"title":{},"body":{"classes/CreateEatingPlanInput.html":{}}}],["plan.input.ts:14",{"_index":158,"title":{},"body":{"classes/CreateEatingPlanInput.html":{}}}],["plan.input.ts:17",{"_index":156,"title":{},"body":{"classes/CreateEatingPlanInput.html":{}}}],["plan.input.ts:8",{"_index":159,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"classes/UpdateEatingPlanInput.html":{}}}],["plan.module",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"modules/UserModule.html":{}}}],["plan.module.ts",{"_index":247,"title":{},"body":{"modules/EatingPlanModule.html":{}}}],["plan.resolver",{"_index":252,"title":{},"body":{"modules/EatingPlanModule.html":{}}}],["plan.resolver.ts",{"_index":257,"title":{},"body":{"classes/EatingPlanResolver.html":{},"coverage.html":{}}}],["plan.resolver.ts:21",{"_index":264,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["plan.resolver.ts:29",{"_index":269,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["plan.resolver.ts:37",{"_index":275,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["plan.resolver.ts:44",{"_index":273,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["plan.resolver.ts:52",{"_index":281,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["plan.resolver.ts:61",{"_index":278,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["plan.resolver.ts:69",{"_index":284,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["plan.schema",{"_index":249,"title":{},"body":{"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"injectables/UserService.html":{}}}],["plan.schema.ts",{"_index":201,"title":{},"body":{"classes/EatingPlan.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["plan.schema.ts:13",{"_index":206,"title":{},"body":{"classes/EatingPlan.html":{}}}],["plan.schema.ts:17",{"_index":219,"title":{},"body":{"classes/EatingPlan.html":{}}}],["plan.schema.ts:21",{"_index":209,"title":{},"body":{"classes/EatingPlan.html":{}}}],["plan.schema.ts:25",{"_index":216,"title":{},"body":{"classes/EatingPlan.html":{}}}],["plan.schema.ts:29",{"_index":213,"title":{},"body":{"classes/EatingPlan.html":{}}}],["plan.schema.ts:32",{"_index":222,"title":{},"body":{"classes/EatingPlan.html":{}}}],["plan.schema.ts:35",{"_index":207,"title":{},"body":{"classes/EatingPlan.html":{}}}],["plan.service",{"_index":250,"title":{},"body":{"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/UserService.html":{}}}],["plan.service.ts",{"_index":315,"title":{},"body":{"injectables/EatingPlanService.html":{},"coverage.html":{}}}],["plan.service.ts:14",{"_index":324,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["plan.service.ts:20",{"_index":327,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["plan.service.ts:32",{"_index":338,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["plan.service.ts:46",{"_index":336,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["plan.service.ts:50",{"_index":331,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["plan.service.ts:54",{"_index":337,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["plan.service.ts:61",{"_index":333,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["plan.service.ts:65",{"_index":329,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["plan.service.ts:69",{"_index":342,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["plan.service.ts:88",{"_index":340,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["plan/dto/create",{"_index":145,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"coverage.html":{}}}],["plan/dto/meal.input.ts",{"_index":443,"title":{},"body":{"classes/MealInput.html":{},"coverage.html":{}}}],["plan/dto/meal.input.ts:10",{"_index":444,"title":{},"body":{"classes/MealInput.html":{}}}],["plan/dto/meal.input.ts:13",{"_index":447,"title":{},"body":{"classes/MealInput.html":{}}}],["plan/dto/meal.input.ts:16",{"_index":446,"title":{},"body":{"classes/MealInput.html":{}}}],["plan/dto/meal.input.ts:7",{"_index":445,"title":{},"body":{"classes/MealInput.html":{}}}],["plan/dto/update",{"_index":666,"title":{},"body":{"classes/UpdateEatingPlanInput.html":{},"coverage.html":{}}}],["plan/eating",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["plan/meal.resolver.ts",{"_index":448,"title":{},"body":{"classes/MealResolver.html":{},"coverage.html":{}}}],["plan/meal.resolver.ts:11",{"_index":455,"title":{},"body":{"classes/MealResolver.html":{}}}],["plan/meal.resolver.ts:7",{"_index":452,"title":{},"body":{"classes/MealResolver.html":{}}}],["plan/schemas/eating",{"_index":200,"title":{},"body":{"classes/EatingPlan.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["plan/schemas/meal.schema.ts",{"_index":431,"title":{},"body":{"classes/Meal.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["plan/schemas/meal.schema.ts:13",{"_index":436,"title":{},"body":{"classes/Meal.html":{}}}],["plan/schemas/meal.schema.ts:17",{"_index":435,"title":{},"body":{"classes/Meal.html":{}}}],["plan/schemas/meal.schema.ts:21",{"_index":438,"title":{},"body":{"classes/Meal.html":{}}}],["plan/schemas/meal.schema.ts:25",{"_index":437,"title":{},"body":{"classes/Meal.html":{}}}],["please",{"_index":931,"title":{},"body":{"index.html":{}}}],["prisma/client",{"_index":857,"title":{},"body":{"dependencies.html":{}}}],["private",{"_index":125,"title":{},"body":{"injectables/AuthService.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["production",{"_index":913,"title":{},"body":{"index.html":{}}}],["progressive",{"_index":891,"title":{},"body":{"index.html":{}}}],["project",{"_index":923,"title":{},"body":{"index.html":{}}}],["promise",{"_index":117,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateRecipeInput.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"injectables/JwtStrategy.html":{},"classes/MealResolver.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateUserInput.html":{},"injectables/UserService.html":{}}}],["prop",{"_index":224,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Ingredient.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["prop()@field(undefined",{"_index":208,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Ingredient.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["prop({default",{"_index":210,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Recipe.html":{},"classes/User.html":{}}}],["prop({required",{"_index":217,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/User.html":{}}}],["prop({type",{"_index":214,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{}}}],["properties",{"_index":147,"title":{"properties.html":{}},"body":{"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"interfaces/FileUpload.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"interfaces/JwtPayload.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"properties.html":{}}}],["providers",{"_index":75,"title":{},"body":{"modules/AuthModule.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{}}}],["public",{"_index":63,"title":{},"body":{"modules/AppModule.html":{}}}],["public/${imagename",{"_index":545,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["quantity",{"_index":392,"title":{},"body":{"classes/Ingredient.html":{},"classes/IngredientInput.html":{}}}],["query",{"_index":288,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingListResolver.html":{}}}],["query(undefined",{"_index":271,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingListResolver.html":{}}}],["read",{"_index":932,"title":{},"body":{"index.html":{}}}],["readonly",{"_index":302,"title":{},"body":{"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"injectables/JwtStrategy.html":{},"classes/MealResolver.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["recipe",{"_index":365,"title":{"classes/Recipe.html":{}},"body":{"injectables/EatingPlanService.html":{},"classes/Meal.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["recipe.input",{"_index":503,"title":{},"body":{"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/UpdateRecipeInput.html":{}}}],["recipe.input.ts",{"_index":167,"title":{},"body":{"classes/CreateRecipeInput.html":{},"classes/UpdateRecipeInput.html":{},"coverage.html":{}}}],["recipe.input.ts:12",{"_index":173,"title":{},"body":{"classes/CreateRecipeInput.html":{}}}],["recipe.input.ts:15",{"_index":181,"title":{},"body":{"classes/CreateRecipeInput.html":{}}}],["recipe.input.ts:18",{"_index":177,"title":{},"body":{"classes/CreateRecipeInput.html":{}}}],["recipe.input.ts:21",{"_index":178,"title":{},"body":{"classes/CreateRecipeInput.html":{}}}],["recipe.input.ts:24",{"_index":175,"title":{},"body":{"classes/CreateRecipeInput.html":{}}}],["recipe.input.ts:27",{"_index":174,"title":{},"body":{"classes/CreateRecipeInput.html":{}}}],["recipe.input.ts:30",{"_index":179,"title":{},"body":{"classes/CreateRecipeInput.html":{}}}],["recipe.input.ts:8",{"_index":670,"title":{},"body":{"classes/UpdateRecipeInput.html":{}}}],["recipe.input.ts:9",{"_index":180,"title":{},"body":{"classes/CreateRecipeInput.html":{}}}],["recipe.name",{"_index":441,"title":{},"body":{"classes/Meal.html":{},"modules/RecipeModule.html":{}}}],["recipe.resolver",{"_index":480,"title":{},"body":{"modules/RecipeModule.html":{}}}],["recipe.save",{"_index":550,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe.service",{"_index":481,"title":{},"body":{"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{}}}],["recipe.userid",{"_index":788,"title":{},"body":{"injectables/UserService.html":{}}}],["recipe.userid.equals(user.sub",{"_index":554,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipe/dto/ingredient.input",{"_index":197,"title":{},"body":{"classes/CreateShoppingListInput.html":{}}}],["recipe/recipe.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{},"modules/EatingPlanModule.html":{},"modules/UserModule.html":{}}}],["recipe/recipe.service",{"_index":456,"title":{},"body":{"classes/MealResolver.html":{},"injectables/UserService.html":{}}}],["recipe/schemas/ingredient.schema",{"_index":198,"title":{},"body":{"classes/CreateShoppingListInput.html":{},"classes/ShoppingList.html":{}}}],["recipe/schemas/recipe.schema",{"_index":439,"title":{},"body":{"classes/Meal.html":{},"classes/MealResolver.html":{},"injectables/UserService.html":{}}}],["recipedocument",{"_index":472,"title":{},"body":{"classes/Recipe.html":{},"injectables/RecipeService.html":{},"miscellaneous/typealiases.html":{}}}],["recipeid",{"_index":746,"title":{},"body":{"injectables/UserService.html":{}}}],["recipemodel",{"_index":517,"title":{},"body":{"injectables/RecipeService.html":{}}}],["recipemodule",{"_index":9,"title":{"modules/RecipeModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["reciperesolver",{"_index":479,"title":{"classes/RecipeResolver.html":{}},"body":{"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"coverage.html":{}}}],["recipes",{"_index":449,"title":{},"body":{"classes/MealResolver.html":{},"classes/RecipeResolver.html":{}}}],["recipes(@parent",{"_index":457,"title":{},"body":{"classes/MealResolver.html":{}}}],["recipes(meal",{"_index":453,"title":{},"body":{"classes/MealResolver.html":{}}}],["recipeschema",{"_index":473,"title":{},"body":{"classes/Recipe.html":{},"modules/RecipeModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["recipeservice",{"_index":451,"title":{"injectables/RecipeService.html":{}},"body":{"classes/MealResolver.html":{},"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["recipesid",{"_index":433,"title":{},"body":{"classes/Meal.html":{},"classes/MealInput.html":{}}}],["ref",{"_index":221,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{}}}],["reflect",{"_index":874,"title":{},"body":{"dependencies.html":{}}}],["reflector",{"_index":563,"title":{},"body":{"guards/RolesGuard.html":{}}}],["regex",{"_index":356,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["remove",{"_index":320,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["remove(id",{"_index":339,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["removeeatingplan",{"_index":261,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["removeeatingplan(id",{"_index":277,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["removerecipe",{"_index":487,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["removerecipe(id",{"_index":496,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["removeshoppinglist",{"_index":603,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["removeshoppinglist(id",{"_index":614,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["repository",{"_index":902,"title":{},"body":{"index.html":{}}}],["required",{"_index":236,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/User.html":{}}}],["requiredroles",{"_index":569,"title":{},"body":{"guards/RolesGuard.html":{}}}],["requiredroles.some((role",{"_index":573,"title":{},"body":{"guards/RolesGuard.html":{}}}],["reset",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}],["resolvefield",{"_index":289,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/MealResolver.html":{},"classes/RecipeResolver.html":{}}}],["resolvefield('recipes",{"_index":454,"title":{},"body":{"classes/MealResolver.html":{}}}],["resolvefield('username",{"_index":283,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{}}}],["resolver",{"_index":290,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/MealResolver.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingListResolver.html":{}}}],["results",{"_index":67,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"interfaces/FileUpload.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"modules.html":{},"overview.html":{},"properties.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["return",{"_index":132,"title":{},"body":{"injectables/AuthService.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MealResolver.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":110,"title":{},"body":{"injectables/AuthService.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/GqlAuthGuard.html":{},"injectables/JwtStrategy.html":{},"classes/MealResolver.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["rimraf",{"_index":877,"title":{},"body":{"dependencies.html":{}}}],["role",{"_index":407,"title":{},"body":{"interfaces/JwtPayload.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["roles",{"_index":138,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"guards/RolesGuard.html":{},"classes/User.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["rolesguard",{"_index":559,"title":{"guards/RolesGuard.html":{}},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["rootpath",{"_index":61,"title":{},"body":{"modules/AppModule.html":{}}}],["run",{"_index":908,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":879,"title":{},"body":{"dependencies.html":{}}}],["saltorrounds",{"_index":773,"title":{},"body":{"injectables/UserService.html":{}}}],["saved",{"_index":791,"title":{},"body":{"injectables/UserService.html":{}}}],["savedeatingplansid",{"_index":684,"title":{},"body":{"classes/User.html":{}}}],["savedrecipesid",{"_index":685,"title":{},"body":{"classes/User.html":{}}}],["saveeatingplan",{"_index":718,"title":{},"body":{"injectables/UserService.html":{}}}],["saveeatingplan(eatingplanid",{"_index":741,"title":{},"body":{"injectables/UserService.html":{}}}],["saverecipe",{"_index":719,"title":{},"body":{"injectables/UserService.html":{}}}],["saverecipe(recipeid",{"_index":744,"title":{},"body":{"injectables/UserService.html":{}}}],["scalable",{"_index":896,"title":{},"body":{"index.html":{}}}],["schema",{"_index":225,"title":{},"body":{"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"classes/Ingredient.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"modules/RecipeModule.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/User.html":{},"modules/UserModule.html":{}}}],["schemafactory",{"_index":226,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Ingredient.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["schemafactory.createforclass(eatingplan",{"_index":241,"title":{},"body":{"classes/EatingPlan.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(ingredient",{"_index":400,"title":{},"body":{"classes/Ingredient.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(meal",{"_index":442,"title":{},"body":{"classes/Meal.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(recipe",{"_index":474,"title":{},"body":{"classes/Recipe.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(shoppinglist",{"_index":586,"title":{},"body":{"classes/ShoppingList.html":{},"miscellaneous/variables.html":{}}}],["schemafactory.createforclass(user",{"_index":701,"title":{},"body":{"classes/User.html":{},"miscellaneous/variables.html":{}}}],["schemas/eating",{"_index":248,"title":{},"body":{"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{}}}],["schemas/ingredient.schema",{"_index":182,"title":{},"body":{"classes/CreateRecipeInput.html":{}}}],["schemas/meal.schema",{"_index":164,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"classes/MealResolver.html":{}}}],["schemas/recipe.schema",{"_index":482,"title":{},"body":{"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{}}}],["schemas/shopping",{"_index":597,"title":{},"body":{"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{}}}],["schemas/user.schema",{"_index":709,"title":{},"body":{"modules/UserModule.html":{},"injectables/UserService.html":{}}}],["secret",{"_index":85,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":426,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["server",{"_index":860,"title":{},"body":{"dependencies.html":{},"index.html":{}}}],["serveroot",{"_index":64,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule",{"_index":33,"title":{},"body":{"modules/AppModule.html":{}}}],["servestaticmodule.forroot",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["setmetadata('roles",{"_index":969,"title":{},"body":{"miscellaneous/variables.html":{}}}],["shopping",{"_index":193,"title":{},"body":{"classes/CreateShoppingListInput.html":{},"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateShoppingListInput.html":{},"modules/UserModule.html":{},"coverage.html":{}}}],["shoppinglist",{"_index":575,"title":{"classes/ShoppingList.html":{}},"body":{"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"coverage.html":{}}}],["shoppinglist.name",{"_index":599,"title":{},"body":{"modules/ShoppingListModule.html":{}}}],["shoppinglist.remove",{"_index":653,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["shoppinglist.save",{"_index":641,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["shoppinglist.userid.equals(sub",{"_index":646,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["shoppinglistdocument",{"_index":584,"title":{},"body":{"classes/ShoppingList.html":{},"injectables/ShoppingListService.html":{},"miscellaneous/typealiases.html":{}}}],["shoppinglistmodel",{"_index":631,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["shoppinglistmodule",{"_index":587,"title":{"modules/ShoppingListModule.html":{}},"body":{"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["shoppinglistresolver",{"_index":594,"title":{"classes/ShoppingListResolver.html":{}},"body":{"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"coverage.html":{}}}],["shoppinglists",{"_index":611,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["shoppinglistschema",{"_index":585,"title":{},"body":{"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["shoppinglistservice",{"_index":591,"title":{"injectables/ShoppingListService.html":{}},"body":{"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"coverage.html":{},"overview.html":{}}}],["side",{"_index":897,"title":{},"body":{"index.html":{}}}],["signin",{"_index":720,"title":{},"body":{"injectables/UserService.html":{}}}],["signin(undefined",{"_index":747,"title":{},"body":{"injectables/UserService.html":{}}}],["signininput",{"_index":654,"title":{"classes/SignInInput.html":{}},"body":{"classes/SignInInput.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["signoptions",{"_index":87,"title":{},"body":{"modules/AuthModule.html":{}}}],["signupinput",{"_index":660,"title":{"classes/SignUpInput.html":{}},"body":{"classes/SignUpInput.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["source",{"_index":15,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"interfaces/FileUpload.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"modules/RecipeModule.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"index.html":{}}}],["sponsors",{"_index":926,"title":{},"body":{"index.html":{}}}],["src/.../current",{"_index":965,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../eating",{"_index":958,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../ingredient.schema.ts",{"_index":959,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":888,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../meal.schema.ts",{"_index":960,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../recipe.schema.ts",{"_index":961,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../role.enum.ts",{"_index":883,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../roles.decorator.ts",{"_index":966,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../shopping",{"_index":962,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/.../user.schema.ts",{"_index":963,"title":{},"body":{"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":17,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.module.ts",{"_index":74,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":92,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:16",{"_index":115,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:25",{"_index":109,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:9",{"_index":102,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/decorators/current",{"_index":824,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/decorators/roles.decorator.ts",{"_index":828,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/enums/role.enum.ts",{"_index":884,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/auth/guards/gql",{"_index":377,"title":{},"body":{"classes/GqlAuthGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts",{"_index":560,"title":{},"body":{"guards/RolesGuard.html":{},"coverage.html":{}}}],["src/auth/guards/roles.guard.ts:6",{"_index":564,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/guards/roles.guard.ts:9",{"_index":566,"title":{},"body":{"guards/RolesGuard.html":{}}}],["src/auth/interfaces/jwt",{"_index":405,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts",{"_index":409,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/strategies/jwt.strategy.ts:17",{"_index":414,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/strategies/jwt.strategy.ts:8",{"_index":412,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/eating",{"_index":144,"title":{},"body":{"classes/CreateEatingPlanInput.html":{},"classes/EatingPlan.html":{},"modules/EatingPlanModule.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/UpdateEatingPlanInput.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/main.ts",{"_index":834,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/recipe/dto/create",{"_index":166,"title":{},"body":{"classes/CreateRecipeInput.html":{},"coverage.html":{}}}],["src/recipe/dto/ingredient.input.ts",{"_index":401,"title":{},"body":{"classes/IngredientInput.html":{},"coverage.html":{}}}],["src/recipe/dto/ingredient.input.ts:12",{"_index":404,"title":{},"body":{"classes/IngredientInput.html":{}}}],["src/recipe/dto/ingredient.input.ts:6",{"_index":402,"title":{},"body":{"classes/IngredientInput.html":{}}}],["src/recipe/dto/ingredient.input.ts:9",{"_index":403,"title":{},"body":{"classes/IngredientInput.html":{}}}],["src/recipe/dto/update",{"_index":669,"title":{},"body":{"classes/UpdateRecipeInput.html":{},"coverage.html":{}}}],["src/recipe/interfaces/file",{"_index":369,"title":{},"body":{"interfaces/FileUpload.html":{},"coverage.html":{}}}],["src/recipe/recipe.module.ts",{"_index":478,"title":{},"body":{"modules/RecipeModule.html":{}}}],["src/recipe/recipe.resolver.ts",{"_index":483,"title":{},"body":{"classes/RecipeResolver.html":{},"coverage.html":{}}}],["src/recipe/recipe.resolver.ts:21",{"_index":489,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["src/recipe/recipe.resolver.ts:29",{"_index":491,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["src/recipe/recipe.resolver.ts:37",{"_index":495,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["src/recipe/recipe.resolver.ts:42",{"_index":493,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["src/recipe/recipe.resolver.ts:48",{"_index":500,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["src/recipe/recipe.resolver.ts:57",{"_index":497,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["src/recipe/recipe.resolver.ts:65",{"_index":502,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["src/recipe/recipe.service.ts",{"_index":513,"title":{},"body":{"injectables/RecipeService.html":{},"coverage.html":{}}}],["src/recipe/recipe.service.ts:113",{"_index":530,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:121",{"_index":524,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:125",{"_index":521,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:17",{"_index":516,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:23",{"_index":519,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:47",{"_index":529,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:57",{"_index":526,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:61",{"_index":523,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:65",{"_index":528,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/recipe.service.ts:72",{"_index":531,"title":{},"body":{"injectables/RecipeService.html":{}}}],["src/recipe/schemas/ingredient.schema.ts",{"_index":391,"title":{},"body":{"classes/Ingredient.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/recipe/schemas/ingredient.schema.ts:12",{"_index":394,"title":{},"body":{"classes/Ingredient.html":{}}}],["src/recipe/schemas/ingredient.schema.ts:16",{"_index":396,"title":{},"body":{"classes/Ingredient.html":{}}}],["src/recipe/schemas/ingredient.schema.ts:20",{"_index":397,"title":{},"body":{"classes/Ingredient.html":{}}}],["src/recipe/schemas/recipe.schema.ts",{"_index":459,"title":{},"body":{"classes/Recipe.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/recipe/schemas/recipe.schema.ts:13",{"_index":460,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:17",{"_index":468,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:21",{"_index":462,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:25",{"_index":469,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:29",{"_index":465,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:33",{"_index":466,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:37",{"_index":464,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:41",{"_index":463,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:45",{"_index":467,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:48",{"_index":470,"title":{},"body":{"classes/Recipe.html":{}}}],["src/recipe/schemas/recipe.schema.ts:51",{"_index":461,"title":{},"body":{"classes/Recipe.html":{}}}],["src/shopping",{"_index":191,"title":{},"body":{"classes/CreateShoppingListInput.html":{},"classes/ShoppingList.html":{},"modules/ShoppingListModule.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateShoppingListInput.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/user/dto/logged",{"_index":428,"title":{},"body":{"classes/LoggedUserOutput.html":{},"coverage.html":{}}}],["src/user/dto/sign",{"_index":655,"title":{},"body":{"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"coverage.html":{}}}],["src/user/dto/udpate",{"_index":675,"title":{},"body":{"classes/UpdateUserInput.html":{},"coverage.html":{}}}],["src/user/schemas/user.schema.ts",{"_index":682,"title":{},"body":{"classes/User.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["src/user/schemas/user.schema.ts:11",{"_index":686,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:15",{"_index":697,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:18",{"_index":691,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:21",{"_index":693,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:25",{"_index":687,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:29",{"_index":688,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:32",{"_index":692,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:35",{"_index":696,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:38",{"_index":695,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:41",{"_index":694,"title":{},"body":{"classes/User.html":{}}}],["src/user/schemas/user.schema.ts:44",{"_index":689,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.module.ts",{"_index":706,"title":{},"body":{"modules/UserModule.html":{}}}],["src/user/user.resolver.ts",{"_index":840,"title":{},"body":{"coverage.html":{}}}],["src/user/user.service.ts",{"_index":712,"title":{},"body":{"injectables/UserService.html":{},"coverage.html":{}}}],["src/user/user.service.ts:118",{"_index":745,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:145",{"_index":754,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:173",{"_index":742,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:200",{"_index":752,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:228",{"_index":739,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:239",{"_index":737,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:26",{"_index":725,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:265",{"_index":750,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:35",{"_index":728,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:48",{"_index":731,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:52",{"_index":733,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:60",{"_index":730,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:68",{"_index":740,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:72",{"_index":735,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:80",{"_index":748,"title":{},"body":{"injectables/UserService.html":{}}}],["src/user/user.service.ts:89",{"_index":756,"title":{},"body":{"injectables/UserService.html":{}}}],["start",{"_index":909,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":912,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":914,"title":{},"body":{"index.html":{}}}],["started",{"_index":890,"title":{"index.html":{}},"body":{}}],["starter",{"_index":901,"title":{},"body":{"index.html":{}}}],["statements",{"_index":821,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"dependencies.html":{}}}],["stay",{"_index":935,"title":{},"body":{"index.html":{}}}],["strategies/jwt.strategy",{"_index":77,"title":{},"body":{"modules/AuthModule.html":{}}}],["strategy",{"_index":417,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["stream",{"_index":376,"title":{},"body":{"interfaces/FileUpload.html":{},"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["stream.pipe(imagestream",{"_index":548,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["string",{"_index":113,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"interfaces/FileUpload.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"interfaces/JwtPayload.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"classes/ShoppingListResolver.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["sub",{"_index":135,"title":{},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["super",{"_index":422,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":927,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":946,"title":{},"body":{"modules.html":{}}}],["table",{"_index":844,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":843,"title":{},"body":{"coverage.html":{}}}],["taken",{"_index":768,"title":{},"body":{"injectables/UserService.html":{}}}],["test",{"_index":916,"title":{},"body":{"index.html":{}}}],["test:covsupport",{"_index":919,"title":{},"body":{"index.html":{}}}],["test:e2e",{"_index":918,"title":{},"body":{"index.html":{}}}],["tests",{"_index":915,"title":{},"body":{"index.html":{}}}],["thanks",{"_index":925,"title":{},"body":{"index.html":{}}}],["this.authservice.generateusercredentials(user",{"_index":783,"title":{},"body":{"injectables/UserService.html":{}}}],["this.authservice.validateuser(username",{"_index":781,"title":{},"body":{"injectables/UserService.html":{}}}],["this.eatingplanmodel",{"_index":348,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["this.eatingplanmodel.find",{"_index":355,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["this.eatingplanmodel.findbyid(_id",{"_index":359,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["this.eatingplanmodel.findbyid(id",{"_index":364,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["this.eatingplanmodel.findbyidandremove(id).exec",{"_index":366,"title":{},"body":{"injectables/EatingPlanService.html":{}}}],["this.eatingplanservice.create(createeatingplaninput",{"_index":305,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["this.eatingplanservice.findallpubliclike(like",{"_index":309,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["this.eatingplanservice.findone(eatingplanid",{"_index":797,"title":{},"body":{"injectables/UserService.html":{}}}],["this.eatingplanservice.findone(id",{"_index":307,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["this.eatingplanservice.remove(id",{"_index":312,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["this.eatingplanservice.update(updateeatingplaninput",{"_index":311,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["this.jwtservice.sign(payload",{"_index":141,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.recipemodel",{"_index":549,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.find",{"_index":552,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.findbyid(_id",{"_index":553,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.findbyid(id",{"_index":556,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipemodel.findbyidandremove(id).exec",{"_index":557,"title":{},"body":{"injectables/RecipeService.html":{}}}],["this.recipeservice.create(createrecipeinput",{"_index":505,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["this.recipeservice.findallpublicbyid(meal.recipesid",{"_index":458,"title":{},"body":{"classes/MealResolver.html":{}}}],["this.recipeservice.findallpubliclike(like",{"_index":509,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["this.recipeservice.findone(id",{"_index":507,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["this.recipeservice.findone(recipeid",{"_index":787,"title":{},"body":{"injectables/UserService.html":{}}}],["this.recipeservice.remove(id",{"_index":512,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["this.recipeservice.update(updaterecipeinput",{"_index":511,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["this.reflector.get",{"_index":570,"title":{},"body":{"guards/RolesGuard.html":{}}}],["this.shoppinglistmodel",{"_index":640,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["this.shoppinglistmodel.find",{"_index":649,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["this.shoppinglistmodel.findbyid(_id).exec",{"_index":650,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["this.shoppinglistmodel.findbyid(id).exec",{"_index":642,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["this.shoppinglistmodel.findbyidandupdate(_id",{"_index":651,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["this.shoppinglistservice.create(createshoppinglistinput",{"_index":624,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["this.shoppinglistservice.findallbyuserid(sub",{"_index":621,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["this.shoppinglistservice.findone(id",{"_index":622,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["this.shoppinglistservice.remove(id",{"_index":627,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["this.shoppinglistservice.update(updateshoppinglistinput",{"_index":626,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["this.usermodel",{"_index":765,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.find",{"_index":804,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(id",{"_index":803,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(id).exec",{"_index":777,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyid(sub",{"_index":784,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyidandremove(id).exec",{"_index":780,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findbyidandupdate(sub",{"_index":786,"title":{},"body":{"injectables/UserService.html":{}}}],["this.usermodel.findone",{"_index":766,"title":{},"body":{"injectables/UserService.html":{}}}],["this.userservice.findonebyusername(username",{"_index":128,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userservice.findusernamebyuserid(userid",{"_index":314,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{}}}],["throw",{"_index":352,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["thumbnail",{"_index":172,"title":{},"body":{"classes/CreateRecipeInput.html":{},"classes/Recipe.html":{},"injectables/RecipeService.html":{}}}],["time",{"_index":434,"title":{},"body":{"classes/Meal.html":{},"classes/MealInput.html":{}}}],["timestamps",{"_index":235,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["touch",{"_index":936,"title":{},"body":{"index.html":{}}}],["transformer",{"_index":863,"title":{},"body":{"dependencies.html":{}}}],["true",{"_index":51,"title":{},"body":{"modules/AppModule.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/EatingPlan.html":{},"injectables/EatingPlanService.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/Recipe.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{}}}],["true})@field(undefined",{"_index":218,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/User.html":{}}}],["ts",{"_index":189,"title":{},"body":{"classes/CreateRecipeInput.html":{},"classes/UpdateUserInput.html":{},"dependencies.html":{}}}],["twitter",{"_index":942,"title":{},"body":{"index.html":{}}}],["type",{"_index":105,"title":{},"body":{"injectables/AuthService.html":{},"classes/CreateEatingPlanInput.html":{},"classes/CreateRecipeInput.html":{},"classes/CreateShoppingListInput.html":{},"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"interfaces/FileUpload.html":{},"classes/GqlAuthGuard.html":{},"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/LoggedUserOutput.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["typealiases",{"_index":956,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["types",{"_index":229,"title":{},"body":{"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"interfaces/JwtPayload.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/User.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["types.objectid",{"_index":205,"title":{},"body":{"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"interfaces/JwtPayload.html":{},"classes/Meal.html":{},"classes/MealInput.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateEatingPlanInput.html":{},"classes/UpdateRecipeInput.html":{},"classes/UpdateShoppingListInput.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["typescript",{"_index":900,"title":{},"body":{"index.html":{}}}],["undefined",{"_index":220,"title":{},"body":{"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"classes/Meal.html":{},"classes/MealResolver.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingList.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["undefined})@field(undefined",{"_index":215,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{}}}],["unfollowuser",{"_index":721,"title":{},"body":{"injectables/UserService.html":{}}}],["unfollowuser(username",{"_index":749,"title":{},"body":{"injectables/UserService.html":{}}}],["unique",{"_index":690,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":393,"title":{},"body":{"classes/Ingredient.html":{},"classes/IngredientInput.html":{},"index.html":{}}}],["unknown",{"_index":111,"title":{},"body":{"injectables/AuthService.html":{},"classes/RecipeResolver.html":{},"injectables/UserService.html":{},"miscellaneous/variables.html":{}}}],["unlicensed",{"_index":955,"title":{},"body":{"properties.html":{}}}],["unsaveeatingplan",{"_index":722,"title":{},"body":{"injectables/UserService.html":{}}}],["unsaveeatingplan(eatingplanid",{"_index":751,"title":{},"body":{"injectables/UserService.html":{}}}],["unsaverecipe",{"_index":723,"title":{},"body":{"injectables/UserService.html":{}}}],["unsaverecipe(recipeid",{"_index":753,"title":{},"body":{"injectables/UserService.html":{}}}],["up.input",{"_index":761,"title":{},"body":{"injectables/UserService.html":{}}}],["up.input.ts",{"_index":661,"title":{},"body":{"classes/SignUpInput.html":{},"coverage.html":{}}}],["up.input.ts:12",{"_index":664,"title":{},"body":{"classes/SignUpInput.html":{}}}],["up.input.ts:6",{"_index":665,"title":{},"body":{"classes/SignUpInput.html":{}}}],["up.input.ts:9",{"_index":663,"title":{},"body":{"classes/SignUpInput.html":{}}}],["update",{"_index":321,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{},"injectables/UserService.html":{}}}],["update(undefined",{"_index":341,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{},"injectables/ShoppingListService.html":{}}}],["update(updateuserinput",{"_index":755,"title":{},"body":{"injectables/UserService.html":{}}}],["updateeatingplan",{"_index":262,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["updateeatingplan(updateeatingplaninput",{"_index":279,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["updateeatingplaninput",{"_index":280,"title":{"classes/UpdateEatingPlanInput.html":{}},"body":{"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/UpdateEatingPlanInput.html":{},"coverage.html":{}}}],["updaterecipe",{"_index":488,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["updaterecipe(updaterecipeinput",{"_index":498,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["updaterecipeinput",{"_index":499,"title":{"classes/UpdateRecipeInput.html":{}},"body":{"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/UpdateRecipeInput.html":{},"coverage.html":{}}}],["updateshoppinglist",{"_index":604,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["updateshoppinglist(updateshoppinglistinput",{"_index":616,"title":{},"body":{"classes/ShoppingListResolver.html":{}}}],["updateshoppinglistinput",{"_index":617,"title":{"classes/UpdateShoppingListInput.html":{}},"body":{"classes/ShoppingListResolver.html":{},"injectables/ShoppingListService.html":{},"classes/UpdateShoppingListInput.html":{},"coverage.html":{}}}],["updateuserinput",{"_index":674,"title":{"classes/UpdateUserInput.html":{}},"body":{"classes/UpdateUserInput.html":{},"injectables/UserService.html":{},"coverage.html":{}}}],["updateuserinput.avatar",{"_index":785,"title":{},"body":{"injectables/UserService.html":{}}}],["upload",{"_index":188,"title":{},"body":{"classes/CreateRecipeInput.html":{},"classes/UpdateUserInput.html":{},"dependencies.html":{}}}],["upload.interface.ts",{"_index":370,"title":{},"body":{"interfaces/FileUpload.html":{},"coverage.html":{}}}],["uploads",{"_index":52,"title":{},"body":{"modules/AppModule.html":{}}}],["uri",{"_index":46,"title":{},"body":{"modules/AppModule.html":{}}}],["url",{"_index":543,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["use",{"_index":772,"title":{},"body":{"injectables/UserService.html":{}}}],["usefactory",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":297,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingListResolver.html":{}}}],["useguards(gqlauthguard",{"_index":303,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingListResolver.html":{}}}],["useguards(gqlauthguard)@mutation(undefined",{"_index":266,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{}}}],["user",{"_index":108,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"guards/RolesGuard.html":{},"classes/ShoppingList.html":{},"classes/ShoppingListResolver.html":{},"classes/User.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"miscellaneous/enumerations.html":{}}}],["user._id",{"_index":136,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.decorator",{"_index":295,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{},"classes/ShoppingListResolver.html":{}}}],["user.decorator.ts",{"_index":825,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.email",{"_index":769,"title":{},"body":{"injectables/UserService.html":{}}}],["user.followedusers",{"_index":805,"title":{},"body":{"injectables/UserService.html":{}}}],["user.followedusers.findindex((id",{"_index":815,"title":{},"body":{"injectables/UserService.html":{}}}],["user.followedusers.push(usertofollow._id.tostring",{"_index":813,"title":{},"body":{"injectables/UserService.html":{}}}],["user.followedusers.some",{"_index":810,"title":{},"body":{"injectables/UserService.html":{}}}],["user.input",{"_index":763,"title":{},"body":{"injectables/UserService.html":{}}}],["user.input.ts",{"_index":676,"title":{},"body":{"classes/UpdateUserInput.html":{},"coverage.html":{}}}],["user.input.ts:10",{"_index":679,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["user.input.ts:13",{"_index":680,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["user.input.ts:7",{"_index":681,"title":{},"body":{"classes/UpdateUserInput.html":{}}}],["user.name",{"_index":239,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"modules/UserModule.html":{}}}],["user.output.ts",{"_index":429,"title":{},"body":{"classes/LoggedUserOutput.html":{},"coverage.html":{}}}],["user.output.ts:6",{"_index":430,"title":{},"body":{"classes/LoggedUserOutput.html":{}}}],["user.password",{"_index":130,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user.resolver",{"_index":711,"title":{},"body":{"modules/UserModule.html":{}}}],["user.roles",{"_index":139,"title":{},"body":{"injectables/AuthService.html":{}}}],["user.save",{"_index":776,"title":{},"body":{"injectables/UserService.html":{}}}],["user.savedeatingplansid.findindex",{"_index":802,"title":{},"body":{"injectables/UserService.html":{}}}],["user.savedeatingplansid.push(eatingplanid",{"_index":801,"title":{},"body":{"injectables/UserService.html":{}}}],["user.savedeatingplansid.some",{"_index":800,"title":{},"body":{"injectables/UserService.html":{}}}],["user.savedrecipesid.findindex",{"_index":796,"title":{},"body":{"injectables/UserService.html":{}}}],["user.savedrecipesid.push(recipeid",{"_index":794,"title":{},"body":{"injectables/UserService.html":{}}}],["user.savedrecipesid.some((id",{"_index":793,"title":{},"body":{"injectables/UserService.html":{}}}],["user.service",{"_index":708,"title":{},"body":{"modules/UserModule.html":{}}}],["user.sub",{"_index":349,"title":{},"body":{"injectables/EatingPlanService.html":{},"injectables/RecipeService.html":{}}}],["user.username",{"_index":137,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UserService.html":{}}}],["user/schemas/user.schema",{"_index":123,"title":{},"body":{"injectables/AuthService.html":{},"classes/EatingPlan.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{}}}],["user/user.module",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{}}}],["user/user.service",{"_index":119,"title":{},"body":{"injectables/AuthService.html":{},"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{}}}],["user?.roles?.includes(role",{"_index":574,"title":{},"body":{"guards/RolesGuard.html":{}}}],["userdocument",{"_index":699,"title":{},"body":{"classes/User.html":{},"injectables/UserService.html":{},"miscellaneous/typealiases.html":{}}}],["userid",{"_index":204,"title":{},"body":{"classes/EatingPlan.html":{},"classes/EatingPlanResolver.html":{},"injectables/EatingPlanService.html":{},"classes/Recipe.html":{},"classes/RecipeResolver.html":{},"injectables/RecipeService.html":{},"classes/ShoppingList.html":{},"injectables/ShoppingListService.html":{}}}],["usermodel",{"_index":726,"title":{},"body":{"injectables/UserService.html":{}}}],["usermodule",{"_index":10,"title":{"modules/UserModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/UserModule.html":{},"modules.html":{},"overview.html":{}}}],["username",{"_index":116,"title":{},"body":{"injectables/AuthService.html":{},"classes/EatingPlanResolver.html":{},"interfaces/JwtPayload.html":{},"classes/RecipeResolver.html":{},"classes/SignInInput.html":{},"classes/SignUpInput.html":{},"classes/UpdateUserInput.html":{},"classes/User.html":{},"injectables/UserService.html":{}}}],["username(@parent",{"_index":313,"title":{},"body":{"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{}}}],["username(eatingplan",{"_index":282,"title":{},"body":{"classes/EatingPlanResolver.html":{}}}],["username(recipe",{"_index":501,"title":{},"body":{"classes/RecipeResolver.html":{}}}],["userresolver",{"_index":710,"title":{},"body":{"modules/UserModule.html":{},"coverage.html":{}}}],["userschema",{"_index":700,"title":{},"body":{"classes/User.html":{},"modules/UserModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["userservice",{"_index":99,"title":{"injectables/UserService.html":{}},"body":{"injectables/AuthService.html":{},"classes/EatingPlanResolver.html":{},"classes/RecipeResolver.html":{},"modules/UserModule.html":{},"injectables/UserService.html":{},"coverage.html":{},"overview.html":{}}}],["usertofollow",{"_index":806,"title":{},"body":{"injectables/UserService.html":{}}}],["usertofollow._id",{"_index":812,"title":{},"body":{"injectables/UserService.html":{}}}],["usertofollow._id.equals(id",{"_index":811,"title":{},"body":{"injectables/UserService.html":{}}}],["uuid",{"_index":537,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{},"dependencies.html":{}}}],["uuidv4",{"_index":536,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["v4",{"_index":535,"title":{},"body":{"injectables/RecipeService.html":{},"injectables/UserService.html":{}}}],["validate",{"_index":410,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":413,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validateuser",{"_index":96,"title":{},"body":{"injectables/AuthService.html":{}}}],["validateuser(username",{"_index":112,"title":{},"body":{"injectables/AuthService.html":{}}}],["validator",{"_index":865,"title":{},"body":{"dependencies.html":{}}}],["value",{"_index":885,"title":{},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":826,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":964,"title":{"miscellaneous/variables.html":{}},"body":{"miscellaneous/variables.html":{}}}],["version",{"_index":953,"title":{},"body":{"properties.html":{}}}],["versionkey",{"_index":234,"title":{},"body":{"classes/EatingPlan.html":{},"classes/Ingredient.html":{},"classes/Meal.html":{},"classes/Recipe.html":{},"classes/ShoppingList.html":{},"classes/User.html":{}}}],["view",{"_index":648,"title":{},"body":{"injectables/ShoppingListService.html":{}}}],["watch",{"_index":910,"title":{},"body":{"index.html":{}}}],["website",{"_index":940,"title":{},"body":{"index.html":{}}}],["you'd",{"_index":930,"title":{},"body":{"index.html":{}}}],["yours",{"_index":790,"title":{},"body":{"injectables/UserService.html":{}}}],["zoom",{"_index":11,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/EatingPlanModule.html":{},"modules/RecipeModule.html":{},"modules/ShoppingListModule.html":{},"modules/UserModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nEatingPlanModule\n\nEatingPlanModule\n\nAppModule -->\n\nEatingPlanModule->AppModule\n\n\n\n\n\nRecipeModule\n\nRecipeModule\n\nAppModule -->\n\nRecipeModule->AppModule\n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            EatingPlanModule\n                        \n                        \n                            RecipeModule\n                        \n                        \n                            UserModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\nimport { GraphQLModule } from '@nestjs/graphql';\nimport { ApolloDriver } from '@nestjs/apollo';\nimport { UserModule } from './user/user.module';\nimport { AuthModule } from './auth/auth.module';\nimport { RecipeModule } from './recipe/recipe.module';\nimport { ServeStaticModule } from '@nestjs/serve-static';\nimport { join } from 'path';\nimport { EatingPlanModule } from './eating-plan/eating-plan.module';\n\n@Module({\n  imports: [\n    ConfigModule.forRoot(),\n    MongooseModule.forRootAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        uri: configService.get('DATABASE_URI'),\n      }),\n    }),\n    // GraphQLModule.forRoot({\n    GraphQLModule.forRoot({\n      driver: ApolloDriver,\n      autoSchemaFile: true,\n      uploads: false,\n      cors: false,\n      // cors: {\n      //   origin: 'http://localhost:5173',\n      //   credentials: true,\n      // },\n      fieldResolverEnhancers: ['guards'],\n    }),\n    ServeStaticModule.forRoot({\n      rootPath: join(__dirname, '..', 'public'),\n      serveRoot: '/public',\n    }),\n    UserModule,\n    AuthModule,\n    RecipeModule,\n    EatingPlanModule,\n  ],\n})\nexport class AppModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService \n\nAuthService \n\n\n\nAuthModule\n\nAuthModule\n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            AuthService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { JwtStrategy } from './strategies/jwt.strategy';\nimport { forwardRef, Module } from '@nestjs/common';\nimport { UserModule } from '../user/user.module';\nimport { AuthService } from './auth.service';\nimport { PassportModule } from '@nestjs/passport';\nimport { JwtModule } from '@nestjs/jwt';\nimport { ConfigModule, ConfigService } from '@nestjs/config';\n\n@Module({\n  imports: [\n    ConfigModule,\n    forwardRef(() => UserModule),\n    PassportModule,\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      inject: [ConfigService],\n      useFactory: async (configService: ConfigService) => ({\n        secret: configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: configService.get('JWT_EXPIRATION') },\n      }),\n    }),\n  ],\n  providers: [AuthService, JwtStrategy],\n  exports: [AuthService],\n})\nexport class AuthModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                generateUserCredentials\n                            \n                            \n                                    Async\n                                validateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userService: UserService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        generateUserCredentials\n                        \n                    \n                \n            \n            \n                \n                    \n                    generateUserCredentials(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validateUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    validateUser(username: string, pass: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    pass\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { forwardRef, Inject, Injectable } from '@nestjs/common';\nimport * as bcrypt from 'bcrypt';\nimport { UserService } from '../user/user.service';\nimport { JwtService } from '@nestjs/jwt';\nimport { JwtPayload } from './interfaces/jwt-payload.interface';\nimport { User } from '../user/schemas/user.schema';\n\n@Injectable()\nexport class AuthService {\n  constructor(\n    @Inject(forwardRef(() => UserService))\n    private userService: UserService,\n    private jwtService: JwtService,\n  ) {}\n\n  async validateUser(username: string, pass: string): Promise {\n    const user = await this.userService.findOneByUsername(username);\n    if (user && (await bcrypt.compare(pass, user.password))) {\n      delete user.password;\n      return user;\n    }\n    return null;\n  }\n\n  async generateUserCredentials(user: User) {\n    const payload: JwtPayload = {\n      sub: user._id,\n      username: user.username,\n      roles: user.roles,\n    };\n\n    return {\n      accessToken: this.jwtService.sign(payload),\n    };\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEatingPlanInput.html":{"url":"classes/CreateEatingPlanInput.html","title":"class - CreateEatingPlanInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEatingPlanInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/eating-plan/dto/create-eating-plan.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                isPublic\n                            \n                            \n                                meals\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/dto/create-eating-plan.input.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPublic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/dto/create-eating-plan.input.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        meals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Meal[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/dto/create-eating-plan.input.ts:14\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/dto/create-eating-plan.input.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { MealInput } from './meal.input';\nimport { Field, InputType } from '@nestjs/graphql';\nimport { Meal } from '../schemas/meal.schema';\n\n@InputType()\nexport class CreateEatingPlanInput {\n  @Field(() => String)\n  name: string;\n\n  @Field(() => String, { nullable: true })\n  description?: string;\n\n  @Field(() => [MealInput])\n  meals: Meal[];\n\n  @Field(() => Boolean)\n  isPublic: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateRecipeInput.html":{"url":"classes/CreateRecipeInput.html","title":"class - CreateRecipeInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateRecipeInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/create-recipe.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                difficulty\n                            \n                            \n                                    Optional\n                                estimatedTime\n                            \n                            \n                                    Optional\n                                ingredients\n                            \n                            \n                                    Optional\n                                instructions\n                            \n                            \n                                    Optional\n                                isPublic\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                thumbnail\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.input.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        difficulty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.input.ts:27\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        estimatedTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.input.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Ingredient[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.input.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        instructions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.input.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isPublic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.input.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.input.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        thumbnail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Promise\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/create-recipe.input.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { Ingredient } from '../schemas/ingredient.schema';\nimport { IngredientInput } from './ingredient.input';\nimport { GraphQLUpload, FileUpload } from 'graphql-upload-ts';\n\n@InputType()\nexport class CreateRecipeInput {\n  @Field(() => String)\n  name: string;\n\n  @Field(() => String, { nullable: true })\n  description?: string;\n\n  @Field(() => GraphQLUpload, { nullable: true })\n  thumbnail?: Promise;\n\n  @Field(() => [IngredientInput], { nullable: true })\n  ingredients?: Ingredient[];\n\n  @Field(() => String, { nullable: true })\n  instructions?: string;\n\n  @Field(() => String, { nullable: true })\n  estimatedTime?: string;\n\n  @Field(() => String, { nullable: true })\n  difficulty?: string;\n\n  @Field(() => Boolean, { nullable: true })\n  isPublic?: boolean;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateShoppingListInput.html":{"url":"classes/CreateShoppingListInput.html","title":"class - CreateShoppingListInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateShoppingListInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping-list/dto/create-shopping-list.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                ingredients\n                            \n                            \n                                name\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Ingredient[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping-list/dto/create-shopping-list.input.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping-list/dto/create-shopping-list.input.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { IngredientInput } from '../../recipe/dto/ingredient.input';\nimport { Ingredient } from '../../recipe/schemas/ingredient.schema';\n\n@InputType()\nexport class CreateShoppingListInput {\n  @Field(() => String)\n  name: string;\n\n  @Field(() => [IngredientInput])\n  ingredients: Ingredient[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EatingPlan.html":{"url":"classes/EatingPlan.html","title":"class - EatingPlan","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EatingPlan\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/eating-plan/schemas/eating-plan.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                createdAt\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                isPublic\n                            \n                            \n                                meals\n                            \n                            \n                                name\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/schemas/eating-plan.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/schemas/eating-plan.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/schemas/eating-plan.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        isPublic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})@Field(undefined, {defaultValue: false})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/schemas/eating-plan.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        meals\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Meal[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/schemas/eating-plan.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/schemas/eating-plan.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/schemas/eating-plan.schema.ts:32\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Schema as MongooseSchema, Types } from 'mongoose';\nimport { User } from '../../user/schemas/user.schema';\nimport { Meal, MealSchema } from './meal.schema';\n\nexport type EatingPlanDocument = EatingPlan & Document;\n\n@Schema({ versionKey: false, timestamps: true })\n@ObjectType()\nexport class EatingPlan {\n  @Field(() => String)\n  _id: Types.ObjectId;\n\n  @Prop({ required: true })\n  @Field(() => String)\n  name: string;\n\n  @Prop()\n  @Field(() => String, { nullable: true })\n  description?: string;\n\n  @Prop({ type: [MealSchema] })\n  @Field(() => [Meal])\n  meals: Meal[];\n\n  @Prop({ default: false })\n  @Field(() => Boolean, { defaultValue: false })\n  isPublic: boolean;\n\n  @Prop({ type: MongooseSchema.Types.ObjectId, ref: User.name })\n  userId: Types.ObjectId;\n\n  @Field(() => String)\n  createdAt: string;\n}\n\nexport const EatingPlanSchema = SchemaFactory.createForClass(EatingPlan);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EatingPlanModule.html":{"url":"modules/EatingPlanModule.html","title":"module - EatingPlanModule","body":"\n                   \n\n\n\n\n    Modules\n    EatingPlanModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_EatingPlanModule\n\n\n\ncluster_EatingPlanModule_imports\n\n\n\ncluster_EatingPlanModule_exports\n\n\n\ncluster_EatingPlanModule_providers\n\n\n\n\nRecipeModule\n\nRecipeModule\n\n\n\nEatingPlanModule\n\nEatingPlanModule\n\nEatingPlanModule -->\n\nRecipeModule->EatingPlanModule\n\n\n\n\n\nEatingPlanService \n\nEatingPlanService \n\nEatingPlanService  -->\n\nEatingPlanModule->EatingPlanService \n\n\n\n\n\nEatingPlanService\n\nEatingPlanService\n\nEatingPlanModule -->\n\nEatingPlanService->EatingPlanModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/eating-plan/eating-plan.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EatingPlanService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            RecipeModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            EatingPlanService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { EatingPlan, EatingPlanSchema } from './schemas/eating-plan.schema';\nimport { EatingPlanService } from './eating-plan.service';\nimport { EatingPlanResolver } from './eating-plan.resolver';\nimport { UserModule } from '../user/user.module';\nimport { RecipeModule } from '../recipe/recipe.module';\nimport { MealResolver } from './meal.resolver';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: EatingPlan.name, schema: EatingPlanSchema },\n    ]),\n    RecipeModule,\n    forwardRef(() => UserModule),\n  ],\n  providers: [EatingPlanService, EatingPlanResolver, MealResolver],\n  exports: [EatingPlanService],\n})\nexport class EatingPlanModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EatingPlanResolver.html":{"url":"classes/EatingPlanResolver.html","title":"class - EatingPlanResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EatingPlanResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/eating-plan/eating-plan.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEatingPlan\n                            \n                            \n                                    Async\n                                findAllPublicLike\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                removeEatingPlan\n                            \n                            \n                                    Async\n                                updateEatingPlan\n                            \n                            \n                                    Async\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eatingPlanService: EatingPlanService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/eating-plan/eating-plan.resolver.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eatingPlanService\n                                                  \n                                                        \n                                                                        EatingPlanService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createEatingPlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    createEatingPlan(createEatingPlanInput: CreateEatingPlanInput, user: JwtPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(GqlAuthGuard)@Mutation(undefined, {description: 'Create eating plan'})\n                \n            \n\n            \n                \n                    Defined in src/eating-plan/eating-plan.resolver.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEatingPlanInput\n                                    \n                                                CreateEatingPlanInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPublicLike\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPublicLike(like: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'eatingPlans'})\n                \n            \n\n            \n                \n                    Defined in src/eating-plan/eating-plan.resolver.ts:44\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    like\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: Types.ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'eatingPlan'})\n                \n            \n\n            \n                \n                    Defined in src/eating-plan/eating-plan.resolver.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeEatingPlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeEatingPlan(id: Types.ObjectId, user: JwtPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(GqlAuthGuard)@Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/eating-plan/eating-plan.resolver.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateEatingPlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEatingPlan(updateEatingPlanInput: UpdateEatingPlanInput, user: JwtPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(GqlAuthGuard)@Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/eating-plan/eating-plan.resolver.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateEatingPlanInput\n                                    \n                                                UpdateEatingPlanInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        username\n                        \n                    \n                \n            \n            \n                \n                    \n                    username(eatingPlan: EatingPlan)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField('username', undefined)\n                \n            \n\n            \n                \n                    Defined in src/eating-plan/eating-plan.resolver.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eatingPlan\n                                    \n                                                EatingPlan\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  Args,\n  Mutation,\n  Parent,\n  Query,\n  ResolveField,\n  Resolver,\n} from '@nestjs/graphql';\nimport { EatingPlanService } from './eating-plan.service';\nimport { CreateEatingPlanInput } from './dto/create-eating-plan.input';\nimport { CurrentUser } from '../auth/decorators/current-user.decorator';\nimport { JwtPayload } from '../auth/interfaces/jwt-payload.interface';\nimport { EatingPlan } from './schemas/eating-plan.schema';\nimport { UseGuards } from '@nestjs/common';\nimport { GqlAuthGuard } from '../auth/guards/gql-auth.guard';\nimport { UpdateEatingPlanInput } from './dto/update-eating-plan.input';\nimport { UserService } from '../user/user.service';\nimport { Types } from 'mongoose';\n\n@Resolver(() => EatingPlan)\nexport class EatingPlanResolver {\n  constructor(\n    private readonly eatingPlanService: EatingPlanService,\n    private readonly userService: UserService,\n  ) {}\n\n  @UseGuards(GqlAuthGuard)\n  @Mutation(() => EatingPlan, { description: 'Create eating plan' })\n  async createEatingPlan(\n    @Args('createEatingPlanInput') createEatingPlanInput: CreateEatingPlanInput,\n    @CurrentUser() user: JwtPayload,\n  ): Promise {\n    return await this.eatingPlanService.create(createEatingPlanInput, user);\n  }\n\n  @Query(() => EatingPlan, { name: 'eatingPlan' })\n  async findOne(\n    @Args('id', { type: () => String }) id: Types.ObjectId,\n  ): Promise {\n    return await this.eatingPlanService.findOne(id);\n  }\n\n  @Query(() => [EatingPlan], { name: 'eatingPlans' })\n  async findAllPublicLike(\n    @Args('like', { type: () => String }) like: string,\n  ): Promise {\n    return await this.eatingPlanService.findAllPublicLike(like);\n  }\n\n  @UseGuards(GqlAuthGuard)\n  @Mutation(() => EatingPlan)\n  async updateEatingPlan(\n    @Args('updateEatingPlanInput') updateEatingPlanInput: UpdateEatingPlanInput,\n    @CurrentUser() user: JwtPayload,\n  ): Promise {\n    return await this.eatingPlanService.update(updateEatingPlanInput, user);\n  }\n\n  @UseGuards(GqlAuthGuard)\n  @Mutation(() => EatingPlan)\n  async removeEatingPlan(\n    @Args('id', { type: () => String }) id: Types.ObjectId,\n    @CurrentUser() user: JwtPayload,\n  ): Promise {\n    return await this.eatingPlanService.remove(id, user);\n  }\n\n  @ResolveField('username', () => String)\n  async username(@Parent() eatingPlan: EatingPlan): Promise {\n    const { userId } = eatingPlan;\n    return await this.userService.findUsernameByUserId(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EatingPlanService.html":{"url":"injectables/EatingPlanService.html","title":"injectable - EatingPlanService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  EatingPlanService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/eating-plan/eating-plan.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findAllPrivateByUserId\n                            \n                            \n                                    Async\n                                findAllPublicById\n                            \n                            \n                                    Async\n                                findAllPublicByUserId\n                            \n                            \n                                    Async\n                                findAllPublicLike\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(eatingPlanModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/eating-plan/eating-plan.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        eatingPlanModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createEatingPlanInput: CreateEatingPlanInput, user: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/eating-plan/eating-plan.service.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEatingPlanInput\n                                    \n                                                CreateEatingPlanInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(userId: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/eating-plan/eating-plan.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPrivateByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPrivateByUserId(id: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/eating-plan/eating-plan.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPublicById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPublicById(ids: Types.ObjectId[])\n                \n            \n\n\n            \n                \n                    Defined in src/eating-plan/eating-plan.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            Types.ObjectId[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPublicByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPublicByUserId(id: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/eating-plan/eating-plan.service.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPublicLike\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPublicLike(like: string)\n                \n            \n\n\n            \n                \n                    Defined in src/eating-plan/eating-plan.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    like\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/eating-plan/eating-plan.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: Types.ObjectId, user: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/eating-plan/eating-plan.service.ts:88\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(undefined: UpdateEatingPlanInput, user: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/eating-plan/eating-plan.service.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UpdateEatingPlanInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import {\n  ForbiddenException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { JwtPayload } from '../auth/interfaces/jwt-payload.interface';\nimport { CreateEatingPlanInput } from './dto/create-eating-plan.input';\nimport { UpdateEatingPlanInput } from './dto/update-eating-plan.input';\nimport { EatingPlan, EatingPlanDocument } from './schemas/eating-plan.schema';\n\n@Injectable()\nexport class EatingPlanService {\n  constructor(\n    @InjectModel(EatingPlan.name)\n    private readonly eatingPlanModel: Model,\n  ) {}\n\n  async create(\n    createEatingPlanInput: CreateEatingPlanInput,\n    user: JwtPayload,\n  ): Promise {\n    const eatingPlan = new this.eatingPlanModel({\n      ...createEatingPlanInput,\n      userId: user.sub,\n    });\n\n    return await eatingPlan.save();\n  }\n\n  async findOne(id: Types.ObjectId): Promise {\n    const eatingPlan = await this.eatingPlanModel\n      .findOne({\n        _id: id,\n        isPublic: true,\n      })\n      .exec();\n    if (!eatingPlan) {\n      throw new NotFoundException('Eating plan not found');\n    }\n\n    return eatingPlan;\n  }\n\n  async findAllPublicByUserId(id: Types.ObjectId): Promise {\n    return await this.eatingPlanModel.find({ userId: id, isPublic: true });\n  }\n\n  async findAllPrivateByUserId(id: Types.ObjectId): Promise {\n    return await this.eatingPlanModel.find({ userId: id, isPublic: false });\n  }\n\n  async findAllPublicLike(like: string): Promise {\n    return await this.eatingPlanModel.find({\n      name: { $regex: like, $options: 'i' },\n      isPublic: true,\n    });\n  }\n\n  async findAllPublicById(ids: Types.ObjectId[]): Promise {\n    return await this.eatingPlanModel.find({ _id: { $in: ids } });\n  }\n\n  async findAllByUserId(userId: Types.ObjectId): Promise {\n    return await this.eatingPlanModel.find({ userId });\n  }\n\n  async update(\n    { _id, ...data }: UpdateEatingPlanInput,\n    user: JwtPayload,\n  ): Promise {\n    const eatingPlan = await this.eatingPlanModel.findById(_id);\n    if (!eatingPlan) {\n      throw new NotFoundException('Eating plan not found');\n    }\n    if (!eatingPlan.userId.equals(user.sub)) {\n      throw new ForbiddenException('No access to update that eating plan');\n    }\n\n    return await this.eatingPlanModel\n      .findByIdAndUpdate(_id, {\n        ...data,\n      })\n      .exec();\n  }\n\n  async remove(id: Types.ObjectId, user: JwtPayload): Promise {\n    const eatingPlan = await this.eatingPlanModel.findById(id);\n    if (!eatingPlan.userId.equals(user.sub)) {\n      throw new ForbiddenException('No access to remove that recipe');\n    }\n    return await this.eatingPlanModel.findByIdAndRemove(id).exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/FileUpload.html":{"url":"interfaces/FileUpload.html","title":"interface - FileUpload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  FileUpload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/interfaces/file-upload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            createReadStream\n                                        \n                                \n                                \n                                        \n                                            encoding\n                                        \n                                \n                                \n                                        \n                                            filename\n                                        \n                                \n                                \n                                        \n                                            mimecode\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        createReadStream\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        createReadStream:         function\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         function\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        encoding\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        encoding:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        filename\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        filename:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        mimecode\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        mimecode:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Stream } from 'stream';\n\nexport interface FileUpload {\n  filename: string;\n  mimecode: string;\n  encoding: string;\n  createReadStream: () => Stream;\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GqlAuthGuard.html":{"url":"classes/GqlAuthGuard.html","title":"class - GqlAuthGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GqlAuthGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/guards/gql-auth.guard.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                getRequest\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        getRequest\n                        \n                    \n                \n            \n            \n                \ngetRequest(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/gql-auth.guard.ts:6\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         any\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { ExecutionContext } from '@nestjs/common';\nimport { GqlExecutionContext } from '@nestjs/graphql';\nimport { AuthGuard } from '@nestjs/passport';\n\nexport class GqlAuthGuard extends AuthGuard('jwt') {\n  getRequest(context: ExecutionContext) {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Ingredient.html":{"url":"classes/Ingredient.html","title":"class - Ingredient","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Ingredient\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/schemas/ingredient.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                quantity\n                            \n                            \n                                    Optional\n                                unit\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/ingredient.schema.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/ingredient.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        unit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/ingredient.schema.ts:20\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document } from 'mongoose';\n\nexport type IngredientDocument = Ingredient & Document;\n\n@Schema({ _id: false, versionKey: false })\n@ObjectType()\nexport class Ingredient {\n  @Prop()\n  @Field(() => String)\n  name: string;\n\n  @Prop()\n  @Field(() => Number)\n  quantity: number;\n\n  @Prop()\n  @Field(() => String, { nullable: true })\n  unit?: string;\n}\n\nexport const IngredientSchema = SchemaFactory.createForClass(Ingredient);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/IngredientInput.html":{"url":"classes/IngredientInput.html","title":"class - IngredientInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  IngredientInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/ingredient.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                name\n                            \n                            \n                                quantity\n                            \n                            \n                                    Optional\n                                unit\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/ingredient.input.ts:6\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        quantity\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/ingredient.input.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        unit\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/ingredient.input.ts:12\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\n\n@InputType()\nexport class IngredientInput {\n  @Field(() => String)\n  name: string;\n\n  @Field(() => Number)\n  quantity: number;\n\n  @Field(() => String, { nullable: true })\n  unit?: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  \n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        \n                                            roles\n                                        \n                                \n                                \n                                        \n                                            sub\n                                        \n                                \n                                \n                                        \n                                            username\n                                        \n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        roles\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        roles:         Role[]\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         Role[]\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        sub\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        sub:     Types.ObjectId\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :     Types.ObjectId\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n                    \n                        \n                                \n                                    \n                                        \n                                        username\n                                            \n                                                \n                                            \n                                        \n                                    \n                                \n                                \n                                    \n                                        username:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        import { Types } from 'mongoose';\nimport { Role } from '../enums/role.enum';\n\nexport interface JwtPayload {\n  sub: Types.ObjectId;\n  username: string;\n  roles: Role[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/strategies/jwt.strategy.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/strategies/jwt.strategy.ts:8\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                    ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        validate\n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/strategies/jwt.strategy.ts:17\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable } from '@nestjs/common';\nimport { ConfigService } from '@nestjs/config';\nimport { PassportStrategy } from '@nestjs/passport';\nimport { ExtractJwt, Strategy } from 'passport-jwt';\nimport { JwtPayload } from '../interfaces/jwt-payload.interface';\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(private readonly configService: ConfigService) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      ignoreExpiration: false,\n      secretOrKey: configService.get('JWT_SECRET'),\n    });\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    return payload;\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/LoggedUserOutput.html":{"url":"classes/LoggedUserOutput.html","title":"class - LoggedUserOutput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  LoggedUserOutput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/logged-user.output.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                accessToken\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        accessToken\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/logged-user.output.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\n\n@ObjectType()\nexport class LoggedUserOutput {\n  @Field(() => String)\n  accessToken: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Meal.html":{"url":"classes/Meal.html","title":"class - Meal","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Meal\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/eating-plan/schemas/meal.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                day\n                            \n                            \n                                name\n                            \n                            \n                                recipesId\n                            \n                            \n                                    Optional\n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/schemas/meal.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/schemas/meal.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipesId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     [Types.ObjectId]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/schemas/meal.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/schemas/meal.schema.ts:21\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Schema as MongooseSchema, Types } from 'mongoose';\nimport { Recipe } from '../../recipe/schemas/recipe.schema';\n\nexport type MealDocument = Meal & Document;\n\n@Schema({ versionKey: false, timestamps: false })\n@ObjectType()\nexport class Meal {\n  @Prop({ required: true })\n  @Field(() => String)\n  name: string;\n\n  @Prop({ required: true })\n  @Field(() => Number)\n  day: number;\n\n  @Prop()\n  @Field(() => String, { nullable: true })\n  time?: string;\n\n  @Prop({ type: [MongooseSchema.Types.ObjectId], ref: Recipe.name })\n  @Field(() => [String])\n  recipesId: [Types.ObjectId];\n}\n\nexport const MealSchema = SchemaFactory.createForClass(Meal);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MealInput.html":{"url":"classes/MealInput.html","title":"class - MealInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MealInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/eating-plan/dto/meal.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                day\n                            \n                            \n                                name\n                            \n                            \n                                recipesId\n                            \n                            \n                                    Optional\n                                time\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        day\n                        \n                    \n                \n            \n                \n                    \n                        Type :         number\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/dto/meal.input.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/dto/meal.input.ts:7\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        recipesId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/dto/meal.input.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        time\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/dto/meal.input.ts:13\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { Types } from 'mongoose';\n\n@InputType()\nexport class MealInput {\n  @Field(() => String)\n  name: string;\n\n  @Field(() => Number)\n  day: number;\n\n  @Field(() => String, { nullable: true })\n  time?: string;\n\n  @Field(() => [String])\n  recipesId: Types.ObjectId[];\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MealResolver.html":{"url":"classes/MealResolver.html","title":"class - MealResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MealResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/eating-plan/meal.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                recipes\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(recipeService: RecipeService)\n                    \n                \n                        \n                            \n                                Defined in src/eating-plan/meal.resolver.ts:7\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        recipeService\n                                                  \n                                                        \n                                                                        RecipeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        recipes\n                        \n                    \n                \n            \n            \n                \n                    \n                    recipes(meal: Meal)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField('recipes', undefined)\n                \n            \n\n            \n                \n                    Defined in src/eating-plan/meal.resolver.ts:11\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    meal\n                                    \n                                                Meal\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { Parent, ResolveField, Resolver } from '@nestjs/graphql';\nimport { RecipeService } from '../recipe/recipe.service';\nimport { Recipe } from '../recipe/schemas/recipe.schema';\nimport { Meal } from './schemas/meal.schema';\n\n@Resolver(() => Meal)\nexport class MealResolver {\n  constructor(private readonly recipeService: RecipeService) {}\n\n  @ResolveField('recipes', () => [Recipe])\n  async recipes(@Parent() meal: Meal): Promise {\n    return this.recipeService.findAllPublicById(meal.recipesId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Recipe.html":{"url":"classes/Recipe.html","title":"class - Recipe","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Recipe\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/schemas/recipe.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                createdAt\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                difficulty\n                            \n                            \n                                    Optional\n                                estimatedTime\n                            \n                            \n                                    Optional\n                                ingredients\n                            \n                            \n                                    Optional\n                                instructions\n                            \n                            \n                                    Optional\n                                isPublic\n                            \n                            \n                                name\n                            \n                            \n                                    Optional\n                                thumbnail\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:51\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        description\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        difficulty\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        estimatedTime\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:37\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Ingredient[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        instructions\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:33\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        isPublic\n                        \n                    \n                \n            \n                \n                    \n                        Type :         boolean\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: false})@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:45\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:17\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        thumbnail\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/schemas/recipe.schema.ts:48\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Ingredient, IngredientSchema } from './ingredient.schema';\nimport { Field, ObjectType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Document, Schema as MongooseSchema, Types } from 'mongoose';\nimport { User } from '../../user/schemas/user.schema';\n\nexport type RecipeDocument = Recipe & Document;\n\n@Schema({ versionKey: false, timestamps: true })\n@ObjectType()\nexport class Recipe {\n  @Field(() => String)\n  _id: Types.ObjectId;\n\n  @Prop({ required: true })\n  @Field(() => String)\n  name: string;\n\n  @Prop()\n  @Field(() => String, { nullable: true })\n  description?: string;\n\n  @Prop()\n  @Field(() => String, { nullable: true })\n  thumbnail?: string;\n\n  @Prop({ type: [IngredientSchema] })\n  @Field(() => [Ingredient], { nullable: true })\n  ingredients?: Ingredient[];\n\n  @Prop()\n  @Field(() => String, { nullable: true })\n  instructions?: string;\n\n  @Prop()\n  @Field(() => String, { nullable: true })\n  estimatedTime?: string;\n\n  @Prop()\n  @Field(() => String, { nullable: true })\n  difficulty?: string;\n\n  @Prop({ default: false })\n  @Field(() => Boolean, { nullable: true })\n  isPublic?: boolean;\n\n  @Prop({ type: MongooseSchema.Types.ObjectId, ref: User.name })\n  userId: Types.ObjectId;\n\n  @Field(() => String)\n  createdAt: string;\n}\n\nexport const RecipeSchema = SchemaFactory.createForClass(Recipe);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/RecipeModule.html":{"url":"modules/RecipeModule.html","title":"module - RecipeModule","body":"\n                   \n\n\n\n\n    Modules\n    RecipeModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_RecipeModule\n\n\n\ncluster_RecipeModule_providers\n\n\n\ncluster_RecipeModule_exports\n\n\n\n\nRecipeService \n\nRecipeService \n\n\n\nRecipeModule\n\nRecipeModule\n\nRecipeService  -->\n\nRecipeModule->RecipeService \n\n\n\n\n\nRecipeService\n\nRecipeService\n\nRecipeModule -->\n\nRecipeService->RecipeModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/recipe/recipe.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            RecipeService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            RecipeService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { UserModule } from './../user/user.module';\nimport { Module, forwardRef } from '@nestjs/common';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { RecipeResolver } from './recipe.resolver';\nimport { RecipeService } from './recipe.service';\nimport { Recipe, RecipeSchema } from './schemas/recipe.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: Recipe.name, schema: RecipeSchema }]),\n    forwardRef(() => UserModule),\n  ],\n  providers: [RecipeService, RecipeResolver],\n  exports: [RecipeService],\n})\nexport class RecipeModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/RecipeResolver.html":{"url":"classes/RecipeResolver.html","title":"class - RecipeResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  RecipeResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/recipe.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createRecipe\n                            \n                            \n                                    Async\n                                findAllRecipes\n                            \n                            \n                                    Async\n                                findOneRecipe\n                            \n                            \n                                    Async\n                                removeRecipe\n                            \n                            \n                                    Async\n                                updateRecipe\n                            \n                            \n                                    Async\n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(recipeService: RecipeService, userService: UserService)\n                    \n                \n                        \n                            \n                                Defined in src/recipe/recipe.resolver.ts:21\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        recipeService\n                                                  \n                                                        \n                                                                        RecipeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        userService\n                                                  \n                                                        \n                                                                        UserService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createRecipe\n                        \n                    \n                \n            \n            \n                \n                    \n                    createRecipe(createRecipeInput: CreateRecipeInput, user: JwtPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(GqlAuthGuard)@Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.resolver.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRecipeInput\n                                    \n                                                CreateRecipeInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllRecipes\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllRecipes(like: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'recipes'})\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.resolver.ts:42\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    like\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneRecipe\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneRecipe(id: Types.ObjectId)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'recipe'})\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.resolver.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeRecipe\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeRecipe(id: Types.ObjectId, user: JwtPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(GqlAuthGuard)@Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.resolver.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateRecipe\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateRecipe(updateRecipeInput: UpdateRecipeInput, user: JwtPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @UseGuards(GqlAuthGuard)@Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.resolver.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateRecipeInput\n                                    \n                                                UpdateRecipeInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        username\n                        \n                    \n                \n            \n            \n                \n                    \n                    username(recipe: Recipe)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @ResolveField('username', undefined)\n                \n            \n\n            \n                \n                    Defined in src/recipe/recipe.resolver.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recipe\n                                    \n                                                Recipe\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { JwtPayload } from './../auth/interfaces/jwt-payload.interface';\nimport { GqlAuthGuard } from './../auth/guards/gql-auth.guard';\nimport { UseGuards } from '@nestjs/common';\nimport {\n  Args,\n  Mutation,\n  Parent,\n  Query,\n  ResolveField,\n  Resolver,\n} from '@nestjs/graphql';\nimport { CreateRecipeInput } from './dto/create-recipe.input';\nimport { UpdateRecipeInput } from './dto/update-recipe.input';\nimport { RecipeService } from './recipe.service';\nimport { Recipe } from './schemas/recipe.schema';\nimport { CurrentUser } from '../auth/decorators/current-user.decorator';\nimport { UserService } from '../user/user.service';\nimport { Types } from 'mongoose';\n\n@Resolver(() => Recipe)\nexport class RecipeResolver {\n  constructor(\n    private readonly recipeService: RecipeService,\n    private readonly userService: UserService,\n  ) {}\n\n  @UseGuards(GqlAuthGuard)\n  @Mutation(() => Recipe)\n  async createRecipe(\n    @Args('createRecipeInput') createRecipeInput: CreateRecipeInput,\n    @CurrentUser() user: JwtPayload,\n  ) {\n    return await this.recipeService.create(createRecipeInput, user);\n  }\n\n  @Query(() => Recipe, { name: 'recipe' })\n  async findOneRecipe(@Args('id', { type: () => String }) id: Types.ObjectId) {\n    return await this.recipeService.findOne(id);\n  }\n\n  @Query(() => [Recipe], { name: 'recipes' })\n  async findAllRecipes(@Args('like', { type: () => String }) like: string) {\n    return await this.recipeService.findAllPublicLike(like);\n  }\n\n  @UseGuards(GqlAuthGuard)\n  @Mutation(() => Recipe)\n  async updateRecipe(\n    @Args('updateRecipeInput') updateRecipeInput: UpdateRecipeInput,\n    @CurrentUser() user: JwtPayload,\n  ) {\n    return await this.recipeService.update(updateRecipeInput, user);\n  }\n\n  @UseGuards(GqlAuthGuard)\n  @Mutation(() => Recipe)\n  async removeRecipe(\n    @Args('id', { type: () => String }) id: Types.ObjectId,\n    @CurrentUser() user: JwtPayload,\n  ) {\n    return await this.recipeService.remove(id, user);\n  }\n\n  @ResolveField('username', () => String)\n  async username(@Parent() recipe: Recipe): Promise {\n    const { userId } = recipe;\n    return await this.userService.findUsernameByUserId(userId);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/RecipeService.html":{"url":"injectables/RecipeService.html","title":"injectable - RecipeService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  RecipeService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/recipe.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAllById\n                            \n                            \n                                    Async\n                                findAllPrivateByUserId\n                            \n                            \n                                    Async\n                                findAllPublicById\n                            \n                            \n                                    Async\n                                findAllPublicByUserId\n                            \n                            \n                                    Async\n                                findAllPublicLike\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(recipeModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/recipe/recipe.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        recipeModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createRecipeInput: CreateRecipeInput, user: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createRecipeInput\n                                    \n                                                CreateRecipeInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllById(ids: Types.ObjectId[])\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:125\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            Types.ObjectId[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPrivateByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPrivateByUserId(userId: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPublicById\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPublicById(ids: Types.ObjectId[])\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:121\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    ids\n                                    \n                                            Types.ObjectId[]\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPublicByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPublicByUserId(userId: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllPublicLike\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllPublicLike(name: string)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:65\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    name\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: Types.ObjectId, user: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:113\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(undefined: UpdateRecipeInput, user: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/recipe/recipe.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UpdateRecipeInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { JwtPayload } from './../auth/interfaces/jwt-payload.interface';\nimport { CreateRecipeInput } from './dto/create-recipe.input';\nimport {\n  ForbiddenException,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { Recipe, RecipeDocument } from './schemas/recipe.schema';\nimport { UpdateRecipeInput } from './dto/update-recipe.input';\nimport { createWriteStream } from 'fs';\nimport { join, parse } from 'path';\nimport { v4 as uuidv4 } from 'uuid';\n\n@Injectable()\nexport class RecipeService {\n  constructor(\n    @InjectModel(Recipe.name)\n    private readonly recipeModel: Model,\n  ) {}\n\n  async create(\n    createRecipeInput: CreateRecipeInput,\n    user: JwtPayload,\n  ): Promise {\n    let imageName = null;\n    if (createRecipeInput.thumbnail) {\n      const { createReadStream, filename } = await createRecipeInput.thumbnail;\n      const stream = createReadStream();\n      const { ext } = parse(filename);\n      imageName = uuidv4() + ext;\n      const url = join(process.cwd(), `./public/${imageName}`);\n      const imageStream = await createWriteStream(url);\n      await stream.pipe(imageStream);\n    }\n\n    const recipe = new this.recipeModel({\n      ...createRecipeInput,\n      thumbnail: imageName,\n      userId: user.sub,\n    });\n\n    return await recipe.save();\n  }\n\n  async findOne(id: Types.ObjectId): Promise {\n    const recipe = await this.recipeModel\n      .findOne({ _id: id, isPublic: true })\n      .exec();\n    if (!recipe) {\n      throw new NotFoundException('Recipe not found');\n    }\n    return recipe;\n  }\n\n  async findAllPublicByUserId(userId: Types.ObjectId): Promise {\n    return await this.recipeModel.find({ userId, isPublic: true }).exec();\n  }\n\n  async findAllPrivateByUserId(userId: Types.ObjectId): Promise {\n    return await this.recipeModel.find({ userId, isPublic: false }).exec();\n  }\n\n  async findAllPublicLike(name: string): Promise {\n    return await this.recipeModel.find({\n      name: { $regex: name, $options: 'i' },\n      isPublic: true,\n    });\n  }\n\n  async update(\n    { _id, ...data }: UpdateRecipeInput,\n    user: JwtPayload,\n  ): Promise {\n    const recipe = await this.recipeModel.findById(_id);\n    if (!recipe) {\n      throw new NotFoundException('Recipe not found');\n    }\n    if (!recipe.userId.equals(user.sub)) {\n      throw new ForbiddenException('No access to update that recipe');\n    }\n\n    if (data.thumbnail) {\n      let imageName = null;\n      if (data.thumbnail) {\n        const { createReadStream, filename } = await data.thumbnail;\n        const stream = createReadStream();\n        const { ext } = parse(filename);\n        imageName = uuidv4() + ext;\n        const url = join(process.cwd(), `./public/${imageName}`);\n        const imageStream = await createWriteStream(url);\n        await stream.pipe(imageStream);\n\n        return await this.recipeModel\n          .findByIdAndUpdate(_id, {\n            ...data,\n            thumbnail: imageName,\n          })\n          .exec();\n      }\n    }\n\n    delete data.thumbnail;\n\n    return await this.recipeModel\n      .findByIdAndUpdate(_id, {\n        ...data,\n      })\n      .exec();\n  }\n\n  async remove(id: Types.ObjectId, user: JwtPayload): Promise {\n    const recipe = await this.recipeModel.findById(id);\n    if (!recipe.userId.equals(user.sub)) {\n      throw new ForbiddenException('No access to remove that recipe');\n    }\n    return await this.recipeModel.findByIdAndRemove(id).exec();\n  }\n\n  async findAllPublicById(ids: Types.ObjectId[]): Promise {\n    return await this.recipeModel.find({ _id: { $in: ids }, isPublic: true });\n  }\n\n  async findAllById(ids: Types.ObjectId[]): Promise {\n    return await this.recipeModel.find({ _id: { $in: ids } }).exec();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"guards/RolesGuard.html":{"url":"guards/RolesGuard.html","title":"guard - RolesGuard","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n    Guards\n    RolesGuard\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n        \n            \n            File\n            \n            \n                src/auth/guards/roles.guard.ts\n            \n\n\n\n\n\n\n                \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                canActivate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n                \n    Constructor\n        \n            \n                \n                    \nconstructor(reflector: Reflector)\n                    \n                \n                        \n                            \n                                Defined in src/auth/guards/roles.guard.ts:6\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        reflector\n                                                  \n                                                        \n                                                                    Reflector\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n                \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        canActivate\n                        \n                    \n                \n            \n            \n                \ncanActivate(context: ExecutionContext)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/guards/roles.guard.ts:9\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    context\n                                    \n                                            ExecutionContext\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         boolean\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n        \n\n\n        \n            import { CanActivate, ExecutionContext, Injectable } from '@nestjs/common';\nimport { Reflector } from '@nestjs/core';\nimport { Role } from '../enums/role.enum';\n\n@Injectable()\nexport class RolesGuard implements CanActivate {\n  constructor(private readonly reflector: Reflector) {}\n\n  canActivate(context: ExecutionContext): boolean {\n    const requiredRoles = this.reflector.get(\n      'roles',\n      context.getHandler(),\n    );\n    if (!requiredRoles) {\n      return true;\n    }\n    const { user } = context.switchToHttp().getRequest();\n    return requiredRoles.some((role) => user?.roles?.includes(role));\n  }\n}\n\n        \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShoppingList.html":{"url":"classes/ShoppingList.html","title":"class - ShoppingList","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShoppingList\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping-list/schemas/shopping-list.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                createdAt\n                            \n                            \n                                ingredients\n                            \n                            \n                                name\n                            \n                            \n                                userId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping-list/schemas/shopping-list.schema.ts:16\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping-list/schemas/shopping-list.schema.ts:30\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        ingredients\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Ingredient[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping-list/schemas/shopping-list.schema.ts:24\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        name\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping-list/schemas/shopping-list.schema.ts:20\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        userId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({type: undefined, ref: undefined})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping-list/schemas/shopping-list.schema.ts:27\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Date, Document, Schema as MongooseSchema, Types } from 'mongoose';\nimport {\n  Ingredient,\n  IngredientSchema,\n} from '../../recipe/schemas/ingredient.schema';\nimport { User } from '../../user/schemas/user.schema';\n\nexport type ShoppingListDocument = ShoppingList & Document;\n\n@Schema({ versionKey: false, timestamps: true })\n@ObjectType()\nexport class ShoppingList {\n  @Field(() => String)\n  _id: Types.ObjectId;\n\n  @Prop()\n  @Field(() => String)\n  name: string;\n\n  @Prop({ type: [IngredientSchema] })\n  @Field(() => [Ingredient])\n  ingredients: Ingredient[];\n\n  @Prop({ type: MongooseSchema.Types.ObjectId, ref: User.name })\n  userId: Types.ObjectId;\n\n  @Field(() => String)\n  createdAt: Date;\n}\n\nexport const ShoppingListSchema = SchemaFactory.createForClass(ShoppingList);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ShoppingListModule.html":{"url":"modules/ShoppingListModule.html","title":"module - ShoppingListModule","body":"\n                   \n\n\n\n\n    Modules\n    ShoppingListModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_ShoppingListModule\n\n\n\ncluster_ShoppingListModule_exports\n\n\n\ncluster_ShoppingListModule_providers\n\n\n\n\nShoppingListService \n\nShoppingListService \n\n\n\nShoppingListModule\n\nShoppingListModule\n\nShoppingListService  -->\n\nShoppingListModule->ShoppingListService \n\n\n\n\n\nShoppingListService\n\nShoppingListService\n\nShoppingListModule -->\n\nShoppingListService->ShoppingListModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/shopping-list/shopping-list.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            ShoppingListService\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            ShoppingListService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ShoppingListResolver } from './shopping-list.resolver';\nimport { ShoppingListService } from './shopping-list.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { Module } from '@nestjs/common';\nimport {\n  ShoppingListSchema,\n  ShoppingList,\n} from './schemas/shopping-list.schema';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([\n      { name: ShoppingList.name, schema: ShoppingListSchema },\n    ]),\n  ],\n  providers: [ShoppingListService, ShoppingListResolver],\n  exports: [ShoppingListService],\n})\nexport class ShoppingListModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ShoppingListResolver.html":{"url":"classes/ShoppingListResolver.html","title":"class - ShoppingListResolver","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ShoppingListResolver\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping-list/shopping-list.resolver.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createShoppingList\n                            \n                            \n                                    Async\n                                findAll\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                removeShoppingList\n                            \n                            \n                                    Async\n                                updateShoppingList\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(shoppingListService: ShoppingListService)\n                    \n                \n                        \n                            \n                                Defined in src/shopping-list/shopping-list.resolver.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        shoppingListService\n                                                  \n                                                        \n                                                                        ShoppingListService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        createShoppingList\n                        \n                    \n                \n            \n            \n                \n                    \n                    createShoppingList(createShoppingListInput: CreateShoppingListInput, user: JwtPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/shopping-list/shopping-list.resolver.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createShoppingListInput\n                                    \n                                                CreateShoppingListInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAll\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAll(undefined: JwtPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'shoppingLists'})\n                \n            \n\n            \n                \n                    Defined in src/shopping-list/shopping-list.resolver.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: Types.ObjectId, user: JwtPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Query(undefined, {name: 'shoppingList'})\n                \n            \n\n            \n                \n                    Defined in src/shopping-list/shopping-list.resolver.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        removeShoppingList\n                        \n                    \n                \n            \n            \n                \n                    \n                    removeShoppingList(id: Types.ObjectId, user: JwtPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/shopping-list/shopping-list.resolver.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        updateShoppingList\n                        \n                    \n                \n            \n            \n                \n                    \n                    updateShoppingList(updateShoppingListInput: UpdateShoppingListInput, user: JwtPayload)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Mutation(undefined)\n                \n            \n\n            \n                \n                    Defined in src/shopping-list/shopping-list.resolver.ts:40\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateShoppingListInput\n                                    \n                                                UpdateShoppingListInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { CreateShoppingListInput } from './dto/create-shopping-list.input';\nimport { GqlAuthGuard } from './../auth/guards/gql-auth.guard';\nimport { UseGuards } from '@nestjs/common';\nimport { ShoppingListService } from './shopping-list.service';\nimport { ShoppingList } from './schemas/shopping-list.schema';\nimport { Args, Mutation, Query, Resolver } from '@nestjs/graphql';\nimport { CurrentUser } from '../auth/decorators/current-user.decorator';\nimport { JwtPayload } from '../auth/interfaces/jwt-payload.interface';\nimport { Types } from 'mongoose';\nimport { UpdateShoppingListInput } from './dto/update-shopping-list.input';\n\n@Resolver(() => ShoppingList)\n@UseGuards(GqlAuthGuard)\nexport class ShoppingListResolver {\n  constructor(private readonly shoppingListService: ShoppingListService) {}\n\n  @Query(() => [ShoppingList], { name: 'shoppingLists' })\n  async findAll(@CurrentUser() { sub }: JwtPayload): Promise {\n    return await this.shoppingListService.findAllByUserId(sub);\n  }\n\n  @Query(() => ShoppingList, { name: 'shoppingList' })\n  async findOne(\n    @Args('id', { type: () => String }) id: Types.ObjectId,\n    @CurrentUser() user: JwtPayload,\n  ): Promise {\n    return await this.shoppingListService.findOne(id, user);\n  }\n\n  @Mutation(() => ShoppingList)\n  async createShoppingList(\n    @Args('createShoppingListInput')\n    createShoppingListInput: CreateShoppingListInput,\n    @CurrentUser() user: JwtPayload,\n  ): Promise {\n    return await this.shoppingListService.create(createShoppingListInput, user);\n  }\n\n  @Mutation(() => ShoppingList)\n  async updateShoppingList(\n    @Args('updateShoppingListInput')\n    updateShoppingListInput: UpdateShoppingListInput,\n    @CurrentUser() user: JwtPayload,\n  ): Promise {\n    return await this.shoppingListService.update(updateShoppingListInput, user);\n  }\n\n  @Mutation(() => ShoppingList)\n  async removeShoppingList(\n    @Args('id', { type: () => String }) id: Types.ObjectId,\n    @CurrentUser() user: JwtPayload,\n  ): Promise {\n    return await this.shoppingListService.remove(id, user);\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/ShoppingListService.html":{"url":"injectables/ShoppingListService.html","title":"injectable - ShoppingListService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  ShoppingListService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping-list/shopping-list.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAllByUserId\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(shoppingListModel: Model)\n                    \n                \n                        \n                            \n                                Defined in src/shopping-list/shopping-list.service.ts:17\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        shoppingListModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(createShoppingListInput: CreateShoppingListInput, undefined: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping-list/shopping-list.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createShoppingListInput\n                                    \n                                                CreateShoppingListInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUserId(userId: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping-list/shopping-list.service.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    userId\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: Types.ObjectId, undefined: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping-list/shopping-list.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: Types.ObjectId, undefined: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping-list/shopping-list.service.ts:70\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(undefined: UpdateShoppingListInput, undefined: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/shopping-list/shopping-list.service.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                UpdateShoppingListInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { JwtPayload } from './../auth/interfaces/jwt-payload.interface';\nimport { UpdateShoppingListInput } from './dto/update-shopping-list.input';\nimport { CreateShoppingListInput } from './dto/create-shopping-list.input';\nimport { Injectable } from '@nestjs/common';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport {\n  ShoppingList,\n  ShoppingListDocument,\n} from './schemas/shopping-list.schema';\nimport {\n  ForbiddenException,\n  NotFoundException,\n} from '@nestjs/common/exceptions';\n\n@Injectable()\nexport class ShoppingListService {\n  constructor(\n    @InjectModel(ShoppingList.name)\n    private readonly shoppingListModel: Model,\n  ) {}\n\n  async create(\n    createShoppingListInput: CreateShoppingListInput,\n    { sub }: JwtPayload,\n  ): Promise {\n    const shoppingList = new this.shoppingListModel({\n      ...createShoppingListInput,\n      userId: sub,\n    });\n\n    return await shoppingList.save();\n  }\n\n  async findOne(\n    id: Types.ObjectId,\n    { sub }: JwtPayload,\n  ): Promise {\n    const shoppingList = await this.shoppingListModel.findById(id).exec();\n    if (!shoppingList) {\n      throw new NotFoundException('Shopping list does not exist');\n    }\n    if (!shoppingList.userId.equals(sub)) {\n      throw new ForbiddenException('No permission to view this shopping list');\n    }\n\n    return shoppingList;\n  }\n\n  async findAllByUserId(userId: Types.ObjectId): Promise {\n    return await this.shoppingListModel.find({ userId });\n  }\n\n  async update(\n    { _id, ...data }: UpdateShoppingListInput,\n    { sub }: JwtPayload,\n  ): Promise {\n    const shoppingList = await this.shoppingListModel.findById(_id).exec();\n    if (!shoppingList) {\n      throw new NotFoundException('Shopping list does not exist');\n    }\n    if (!shoppingList.userId.equals(sub)) {\n      throw new ForbiddenException(\n        'No permission to update that shopping list',\n      );\n    }\n    return await this.shoppingListModel.findByIdAndUpdate(_id, data).exec();\n  }\n\n  async remove(id: Types.ObjectId, { sub }: JwtPayload): Promise {\n    const shoppingList = await this.shoppingListModel.findById(id).exec();\n    if (!shoppingList) {\n      throw new NotFoundException('Shopping list does not exist');\n    }\n    if (!shoppingList.userId.equals(sub)) {\n      throw new ForbiddenException(\n        'No permission to remove that shopping list',\n      );\n    }\n\n    return await shoppingList.remove();\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignInInput.html":{"url":"classes/SignInInput.html","title":"class - SignInInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignInInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/sign-in.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/sign-in.input.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/sign-in.input.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\n\n@InputType()\nexport class SignInInput {\n  @Field(() => String)\n  username: string;\n\n  @Field(() => String)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/SignUpInput.html":{"url":"classes/SignUpInput.html","title":"class - SignUpInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  SignUpInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/sign-up.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/sign-up.input.ts:9\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/sign-up.input.ts:12\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/sign-up.input.ts:6\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\n\n@InputType()\nexport class SignUpInput {\n  @Field(() => String)\n  username: string;\n\n  @Field(() => String)\n  email: string;\n\n  @Field(() => String)\n  password: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEatingPlanInput.html":{"url":"classes/UpdateEatingPlanInput.html","title":"class - UpdateEatingPlanInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEatingPlanInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/eating-plan/dto/update-eating-plan.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/eating-plan/dto/update-eating-plan.input.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateEatingPlanInput } from './create-eating-plan.input';\nimport { Field, InputType, PartialType } from '@nestjs/graphql';\nimport { Types } from 'mongoose';\n\n@InputType()\nexport class UpdateEatingPlanInput extends PartialType(CreateEatingPlanInput) {\n  @Field(() => String)\n  _id: Types.ObjectId;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateRecipeInput.html":{"url":"classes/UpdateRecipeInput.html","title":"class - UpdateRecipeInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateRecipeInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/recipe/dto/update-recipe.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/recipe/dto/update-recipe.input.ts:8\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { CreateRecipeInput } from './create-recipe.input';\nimport { Field, InputType, PartialType } from '@nestjs/graphql';\nimport { Types } from 'mongoose';\n\n@InputType()\nexport class UpdateRecipeInput extends PartialType(CreateRecipeInput) {\n  @Field(() => String)\n  _id: Types.ObjectId;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateShoppingListInput.html":{"url":"classes/UpdateShoppingListInput.html","title":"class - UpdateShoppingListInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateShoppingListInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/shopping-list/dto/update-shopping-list.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/shopping-list/dto/update-shopping-list.input.ts:10\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType, PartialType } from '@nestjs/graphql';\nimport { Types } from 'mongoose';\nimport { CreateShoppingListInput } from './create-shopping-list.input';\n\n@InputType()\nexport class UpdateShoppingListInput extends PartialType(\n  CreateShoppingListInput,\n) {\n  @Field(() => String)\n  _id: Types.ObjectId;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserInput.html":{"url":"classes/UpdateUserInput.html","title":"class - UpdateUserInput","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserInput\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/dto/udpate-user.input.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                avatar\n                            \n                            \n                                bio\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Promise\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/udpate-user.input.ts:10\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/udpate-user.input.ts:13\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/dto/udpate-user.input.ts:7\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, InputType } from '@nestjs/graphql';\nimport { FileUpload, GraphQLUpload } from 'graphql-upload-ts';\n\n@InputType()\nexport class UpdateUserInput {\n  @Field(() => String, { nullable: true })\n  username: string;\n\n  @Field(() => GraphQLUpload, { nullable: true })\n  avatar: Promise;\n\n  @Field(() => String, { nullable: true })\n  bio: string;\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/schemas/user.schema.ts\n        \n\n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                _id\n                            \n                            \n                                    Optional\n                                avatar\n                            \n                            \n                                    Optional\n                                bio\n                            \n                            \n                                createdAt\n                            \n                            \n                                email\n                            \n                            \n                                followedUsers\n                            \n                            \n                                password\n                            \n                            \n                                roles\n                            \n                            \n                                savedEatingPlansId\n                            \n                            \n                                savedRecipesId\n                            \n                            \n                                username\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n    \n        Properties\n    \n    \n        \n            \n                \n                    \n                    \n                        _id\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId\n\n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:11\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        avatar\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:25\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                            Optional\n                        bio\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()@Field(undefined, {nullable: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:29\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        createdAt\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Date\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:44\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        email\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:18\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        followedUsers\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:32\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        password\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:21\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        roles\n                        \n                    \n                \n            \n                \n                    \n                        Type :         Role[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({default: 'user'})\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:41\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        savedEatingPlansId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:38\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        savedRecipesId\n                        \n                    \n                \n            \n                \n                    \n                        Type :     Types.ObjectId[]\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop()\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:35\n                        \n                    \n\n\n        \n    \n    \n        \n            \n                \n                    \n                    \n                        username\n                        \n                    \n                \n            \n                \n                    \n                        Type :         string\n\n                    \n                \n                \n                    \n                        Decorators : \n                        \n                        \n                            @Prop({required: true, unique: true})@Field(undefined)\n                        \n                    \n                \n                    \n                        \n                                Defined in src/user/schemas/user.schema.ts:15\n                        \n                    \n\n\n        \n    \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { Field, ObjectType } from '@nestjs/graphql';\nimport { Prop, Schema, SchemaFactory } from '@nestjs/mongoose';\nimport { Date, Document, Types } from 'mongoose';\nimport { Role } from '../../auth/enums/role.enum';\n\nexport type UserDocument = User & Document;\n\n@Schema({ versionKey: false, timestamps: true })\n@ObjectType()\nexport class User {\n  _id: Types.ObjectId;\n\n  @Prop({ required: true, unique: true })\n  @Field(() => String)\n  username: string;\n\n  @Prop({ required: true, unique: true })\n  email: string;\n\n  @Prop()\n  password: string;\n\n  @Prop()\n  @Field(() => String, { nullable: true })\n  avatar?: string;\n\n  @Prop()\n  @Field(() => String, { nullable: true })\n  bio?: string;\n\n  @Prop()\n  followedUsers: Types.ObjectId[];\n\n  @Prop()\n  savedRecipesId: Types.ObjectId[];\n\n  @Prop()\n  savedEatingPlansId: Types.ObjectId[];\n\n  @Prop({ default: 'user' })\n  roles: Role[];\n\n  @Field(() => String)\n  createdAt: Date;\n}\n\nexport const UserSchema = SchemaFactory.createForClass(User);\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UserModule.html":{"url":"modules/UserModule.html","title":"module - UserModule","body":"\n                   \n\n\n\n\n    Modules\n    UserModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\ncluster_UserModule_imports\n\n\n\n\nShoppingListModule\n\nShoppingListModule\n\n\n\nUserModule\n\nUserModule\n\nUserModule -->\n\nShoppingListModule->UserModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/user.module.ts\n        \n\n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UserService\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            ShoppingListModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UserService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { ShoppingListModule } from './../shopping-list/shopping-list.module';\nimport { forwardRef, Module } from '@nestjs/common';\nimport { UserService } from './user.service';\nimport { MongooseModule } from '@nestjs/mongoose';\nimport { User, UserSchema } from './schemas/user.schema';\nimport { RecipeModule } from '../recipe/recipe.module';\nimport { UserResolver } from './user.resolver';\nimport { AuthModule } from '../auth/auth.module';\nimport { EatingPlanModule } from '../eating-plan/eating-plan.module';\n\n@Module({\n  imports: [\n    MongooseModule.forFeature([{ name: User.name, schema: UserSchema }]),\n    forwardRef(() => AuthModule),\n    forwardRef(() => RecipeModule),\n    forwardRef(() => EatingPlanModule),\n    ShoppingListModule,\n  ],\n  providers: [UserService, UserResolver],\n  exports: [UserService],\n})\nexport class UserModule {}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UserService.html":{"url":"injectables/UserService.html","title":"injectable - UserService","body":"\n                   \n\n\n\n\n\n\n\n\n\n  Injectables\n  UserService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                create\n                            \n                            \n                                    Async\n                                findAllByUsernameLike\n                            \n                            \n                                    Async\n                                findOne\n                            \n                            \n                                    Async\n                                findOneByUsername\n                            \n                            \n                                    Async\n                                findUsernameByUserId\n                            \n                            \n                                    Async\n                                followUser\n                            \n                            \n                                    Async\n                                getFollowedUsersById\n                            \n                            \n                                    Async\n                                remove\n                            \n                            \n                                    Async\n                                saveEatingPlan\n                            \n                            \n                                    Async\n                                saveRecipe\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                unfollowUser\n                            \n                            \n                                    Async\n                                unsaveEatingPlan\n                            \n                            \n                                    Async\n                                unsaveRecipe\n                            \n                            \n                                    Async\n                                update\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userModel: Model, authService: AuthService, recipeService: RecipeService, eatingPlanService: EatingPlanService)\n                    \n                \n                        \n                            \n                                Defined in src/user/user.service.ts:26\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userModel\n                                                  \n                                                        \n                                                                        Model\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        authService\n                                                  \n                                                        \n                                                                        AuthService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        recipeService\n                                                  \n                                                        \n                                                                        RecipeService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        eatingPlanService\n                                                  \n                                                        \n                                                                        EatingPlanService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        create\n                        \n                    \n                \n            \n            \n                \n                    \n                    create(signUpInput: SignUpInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    signUpInput\n                                    \n                                                SignUpInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findAllByUsernameLike\n                        \n                    \n                \n            \n            \n                \n                    \n                    findAllByUsernameLike(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:60\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOne\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOne(id: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findOneByUsername\n                        \n                    \n                \n            \n            \n                \n                    \n                    findOneByUsername(username: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:52\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        findUsernameByUserId\n                        \n                    \n                \n            \n            \n                \n                    \n                    findUsernameByUserId(_id: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:72\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    _id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        followUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    followUser(username: string, undefined: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:239\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        getFollowedUsersById\n                        \n                    \n                \n            \n            \n                \n                    \n                    getFollowedUsersById(id: Types.ObjectId)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:228\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        remove\n                        \n                    \n                \n            \n            \n                \n                    \n                    remove(id: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:68\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveEatingPlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveEatingPlan(eatingPlanId: Types.ObjectId, undefined: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:173\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eatingPlanId\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        saveRecipe\n                        \n                    \n                \n            \n            \n                \n                    \n                    saveRecipe(recipeId: Types.ObjectId, undefined: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:118\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recipeId\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        signIn\n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(undefined: SignInInput)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:80\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    \n                                                SignInInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unfollowUser\n                        \n                    \n                \n            \n            \n                \n                    \n                    unfollowUser(username: string, undefined: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:265\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    username\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unsaveEatingPlan\n                        \n                    \n                \n            \n            \n                \n                    \n                    unsaveEatingPlan(eatingPlanId: Types.ObjectId, undefined: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:200\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    eatingPlanId\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        unsaveRecipe\n                        \n                    \n                \n            \n            \n                \n                    \n                    unsaveRecipe(recipeId: Types.ObjectId, undefined: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:145\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    recipeId\n                                    \n                                            Types.ObjectId\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        Async\n                        update\n                        \n                    \n                \n            \n            \n                \n                    \n                    update(updateUserInput: UpdateUserInput, undefined: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.service.ts:89\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserInput\n                                    \n                                                UpdateUserInput\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     unknown\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { JwtPayload } from './../auth/interfaces/jwt-payload.interface';\nimport {\n  BadRequestException,\n  forwardRef,\n  Inject,\n  Injectable,\n  NotFoundException,\n} from '@nestjs/common';\nimport { AuthService } from '../auth/auth.service';\nimport { InjectModel } from '@nestjs/mongoose';\nimport { Model, Types } from 'mongoose';\nimport { User, UserDocument } from './schemas/user.schema';\nimport * as bcrypt from 'bcrypt';\nimport { SignInInput } from './dto/sign-in.input';\nimport { SignUpInput } from './dto/sign-up.input';\nimport { UpdateUserInput } from './dto/udpate-user.input';\nimport { join, parse } from 'path';\nimport { v4 as uuidv4 } from 'uuid';\nimport { createWriteStream } from 'fs';\nimport { RecipeService } from '../recipe/recipe.service';\nimport { Recipe } from '../recipe/schemas/recipe.schema';\nimport { EatingPlan } from '../eating-plan/schemas/eating-plan.schema';\nimport { EatingPlanService } from '../eating-plan/eating-plan.service';\n\n@Injectable()\nexport class UserService {\n  constructor(\n    @InjectModel(User.name) private readonly userModel: Model,\n    @Inject(forwardRef(() => AuthService))\n    private readonly authService: AuthService,\n    private readonly recipeService: RecipeService,\n    private readonly eatingPlanService: EatingPlanService,\n  ) {}\n\n  async create(signUpInput: SignUpInput): Promise {\n    const user = new this.userModel({ ...signUpInput });\n    if (await this.userModel.findOne({ username: user.username })) {\n      throw new BadRequestException('Username is taken');\n    }\n    if (await this.userModel.findOne({ email: user.email })) {\n      throw new BadRequestException('Email is already in use');\n    }\n    const saltOrRounds = 10;\n    user.password = await bcrypt.hash(user.password, saltOrRounds);\n    return user.save();\n  }\n\n  async findOne(id: Types.ObjectId): Promise {\n    return await this.userModel.findById(id).exec();\n  }\n\n  async findOneByUsername(username: string): Promise {\n    const user = await this.userModel.findOne({ username }).exec();\n    if (!user) {\n      throw new NotFoundException('User does not exist');\n    }\n    return user;\n  }\n\n  async findAllByUsernameLike(username: string): Promise {\n    return await this.userModel\n      .find({\n        username: { $regex: username, $options: 'i' },\n      })\n      .exec();\n  }\n\n  async remove(id: string): Promise {\n    return await this.userModel.findByIdAndRemove(id).exec();\n  }\n\n  async findUsernameByUserId(_id: Types.ObjectId): Promise {\n    const user = await this.userModel.findOne({ _id }).exec();\n    if (!user) {\n      throw new NotFoundException('User does not exist');\n    }\n    return user.username;\n  }\n\n  async signIn({ username, password }: SignInInput) {\n    const user = await this.authService.validateUser(username, password);\n    if (!user) {\n      throw new BadRequestException('Username or password are invalid');\n    }\n\n    return this.authService.generateUserCredentials(user);\n  }\n\n  async update(updateUserInput: UpdateUserInput, { sub }: JwtPayload) {\n    const user = await this.userModel.findById(sub);\n    if (!user) {\n      throw new NotFoundException('User not found');\n    }\n\n    if (updateUserInput.avatar) {\n      let imageName = null;\n      if (updateUserInput.avatar) {\n        const { createReadStream, filename } = await updateUserInput.avatar;\n        const stream = createReadStream();\n        const { ext } = parse(filename);\n        imageName = uuidv4() + ext;\n        const url = join(process.cwd(), `./public/${imageName}`);\n        const imageStream = await createWriteStream(url);\n        await stream.pipe(imageStream);\n      }\n\n      return await this.userModel.findByIdAndUpdate(sub, {\n        ...updateUserInput,\n        avatar: imageName,\n      });\n    }\n\n    delete updateUserInput.avatar;\n\n    return await this.userModel.findByIdAndUpdate(sub, updateUserInput);\n  }\n\n  async saveRecipe(\n    recipeId: Types.ObjectId,\n    { sub }: JwtPayload,\n  ): Promise {\n    const user = await this.userModel.findById(sub);\n    if (!user) {\n      throw new NotFoundException('User does not exist');\n    }\n    const recipe = await this.recipeService.findOne(recipeId);\n    if (!recipe) {\n      throw new NotFoundException('Recipe does not exist');\n    }\n    if (recipe.userId === sub) {\n      throw new BadRequestException('Recipe is yours and cannot be saved');\n    }\n\n    const isSaved: boolean = user.savedRecipesId.some((id: Types.ObjectId) => {\n      return id === recipeId;\n    });\n    if (!isSaved) {\n      user.savedRecipesId.push(recipeId);\n      await user.save();\n    }\n\n    return recipe;\n  }\n\n  async unsaveRecipe(\n    recipeId: Types.ObjectId,\n    { sub }: JwtPayload,\n  ): Promise {\n    const user = await this.userModel.findById(sub);\n    if (!user) {\n      throw new NotFoundException('User does not exist');\n    }\n    const recipe = await this.recipeService.findOne(recipeId);\n    if (!recipe) {\n      throw new NotFoundException('Recipe does not exist');\n    }\n\n    const foundIndex: number = user.savedRecipesId.findIndex(\n      (id: Types.ObjectId) => {\n        return id === recipeId;\n      },\n    );\n    if (foundIndex  {\n    const user = await this.userModel.findById(sub);\n    if (!user) {\n      throw new NotFoundException('User does not exist');\n    }\n    const eatingPlan = await this.eatingPlanService.findOne(eatingPlanId);\n    if (!eatingPlan) {\n      throw new NotFoundException('Eating plan does not exist');\n    }\n    if (eatingPlan.userId === sub) {\n      throw new BadRequestException('Eating plan is yours and cannot be saved');\n    }\n\n    const isSaved = user.savedEatingPlansId.some(\n      (id: Types.ObjectId) => id === eatingPlanId,\n    );\n    if (!isSaved) {\n      user.savedEatingPlansId.push(eatingPlanId);\n      await user.save();\n    }\n\n    return eatingPlan;\n  }\n\n  async unsaveEatingPlan(\n    eatingPlanId: Types.ObjectId,\n    { sub }: JwtPayload,\n  ): Promise {\n    const user = await this.userModel.findById(sub);\n    if (!user) {\n      throw new NotFoundException('User does not exist');\n    }\n    const eatingPlan = await this.eatingPlanService.findOne(eatingPlanId);\n    if (!eatingPlan) {\n      throw new NotFoundException('Eating plan does not exist');\n    }\n\n    const foundIndex = user.savedEatingPlansId.findIndex(\n      (id: Types.ObjectId) => {\n        return id === eatingPlanId;\n      },\n    );\n    if (foundIndex  {\n    const user = await this.userModel.findById(id);\n    if (!user) {\n      throw new NotFoundException('User does not exist');\n    }\n\n    return await this.userModel.find({\n      _id: { $in: user.followedUsers },\n    });\n  }\n\n  async followUser(username: string, { sub }: JwtPayload): Promise {\n    const user = await this.userModel.findById(sub);\n    if (!user) {\n      throw new NotFoundException('User does not exist');\n    }\n\n    const userToFollow = await this.userModel.findOne({ username });\n    if (!userToFollow) {\n      throw new NotFoundException('The user to follow does not exist');\n    }\n\n    const isAlreadyFollowed: boolean = user.followedUsers.some(\n      (id: Types.ObjectId) => {\n        return userToFollow._id.equals(id);\n      },\n    );\n    if (userToFollow._id === sub || isAlreadyFollowed) {\n      return userToFollow;\n    }\n\n    user.followedUsers.push(userToFollow._id.toString());\n    await user.save();\n\n    return userToFollow;\n  }\n\n  async unfollowUser(username: string, { sub }: JwtPayload): Promise {\n    const user = await this.userModel.findById(sub);\n    if (!user) {\n      throw new NotFoundException('User does not exist');\n    }\n\n    const followedUser = await this.userModel.findOne({ username });\n    if (!followedUser) {\n      throw new NotFoundException('The user to follow does not exist');\n    }\n\n    const foundIndex = user.followedUsers.findIndex((id: Types.ObjectId) => {\n      return followedUser._id.equals(id);\n    });\n    if (followedUser._id === sub || foundIndex \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/decorators/current-user.decorator.ts\n            \n            variable\n            CurrentUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/decorators/roles.decorator.ts\n            \n            variable\n            Roles\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/guards/gql-auth.guard.ts\n            \n            class\n            GqlAuthGuard\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/guards/roles.guard.ts\n            \n            guard\n            RolesGuard\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/strategies/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/eating-plan/dto/create-eating-plan.input.ts\n            \n            class\n            CreateEatingPlanInput\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/eating-plan/dto/meal.input.ts\n            \n            class\n            MealInput\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/eating-plan/dto/update-eating-plan.input.ts\n            \n            class\n            UpdateEatingPlanInput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/eating-plan/eating-plan.resolver.ts\n            \n            class\n            EatingPlanResolver\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/eating-plan/eating-plan.service.ts\n            \n            injectable\n            EatingPlanService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/eating-plan/meal.resolver.ts\n            \n            class\n            MealResolver\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/eating-plan/schemas/eating-plan.schema.ts\n            \n            class\n            EatingPlan\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/eating-plan/schemas/eating-plan.schema.ts\n            \n            variable\n            EatingPlanSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/eating-plan/schemas/meal.schema.ts\n            \n            class\n            Meal\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/eating-plan/schemas/meal.schema.ts\n            \n            variable\n            MealSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/recipe/dto/create-recipe.input.ts\n            \n            class\n            CreateRecipeInput\n            \n                0 %\n                (0/9)\n            \n        \n        \n            \n                \n                src/recipe/dto/ingredient.input.ts\n            \n            class\n            IngredientInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/recipe/dto/update-recipe.input.ts\n            \n            class\n            UpdateRecipeInput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/recipe/interfaces/file-upload.interface.ts\n            \n            interface\n            FileUpload\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/recipe/recipe.resolver.ts\n            \n            class\n            RecipeResolver\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/recipe/recipe.service.ts\n            \n            injectable\n            RecipeService\n            \n                0 %\n                (0/11)\n            \n        \n        \n            \n                \n                src/recipe/schemas/ingredient.schema.ts\n            \n            class\n            Ingredient\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/recipe/schemas/ingredient.schema.ts\n            \n            variable\n            IngredientSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/recipe/schemas/recipe.schema.ts\n            \n            class\n            Recipe\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/recipe/schemas/recipe.schema.ts\n            \n            variable\n            RecipeSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shopping-list/dto/create-shopping-list.input.ts\n            \n            class\n            CreateShoppingListInput\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/shopping-list/dto/update-shopping-list.input.ts\n            \n            class\n            UpdateShoppingListInput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/shopping-list/schemas/shopping-list.schema.ts\n            \n            class\n            ShoppingList\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/shopping-list/schemas/shopping-list.schema.ts\n            \n            variable\n            ShoppingListSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/shopping-list/shopping-list.resolver.ts\n            \n            class\n            ShoppingListResolver\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/shopping-list/shopping-list.service.ts\n            \n            injectable\n            ShoppingListService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/dto/logged-user.output.ts\n            \n            class\n            LoggedUserOutput\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/user/dto/sign-in.input.ts\n            \n            class\n            SignInInput\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/dto/sign-up.input.ts\n            \n            class\n            SignUpInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/dto/udpate-user.input.ts\n            \n            class\n            UpdateUserInput\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            class\n            User\n            \n                0 %\n                (0/12)\n            \n        \n        \n            \n                \n                src/user/schemas/user.schema.ts\n            \n            variable\n            UserSchema\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.resolver.ts\n            \n            class\n            UserResolver\n            \n                0 %\n                (0/22)\n            \n        \n        \n            \n                \n                src/user/user.service.ts\n            \n            injectable\n            UserService\n            \n                0 %\n                (0/17)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/apollo : ^10.1.4\n        \n            @nestjs/common : ^9.0.0\n        \n            @nestjs/config : ^2.2.0\n        \n            @nestjs/core : ^9.0.0\n        \n            @nestjs/graphql : ^10.1.5\n        \n            @nestjs/jwt : ^9.0.0\n        \n            @nestjs/mapped-types : *\n        \n            @nestjs/mongoose : ^9.2.0\n        \n            @nestjs/passport : ^9.0.0\n        \n            @nestjs/platform-express : ^9.0.0\n        \n            @nestjs/serve-static : ^3.0.0\n        \n            @nestjs/swagger : ^6.1.2\n        \n            @prisma/client : ^4.4.0\n        \n            apollo-server-express : ^3.11.1\n        \n            bcrypt : ^5.1.0\n        \n            class-transformer : ^0.5.1\n        \n            class-validator : ^0.13.2\n        \n            graphql : ^16.6.0\n        \n            graphql-upload-ts : ^2.0.3\n        \n            mongoose : ^6.6.5\n        \n            passport : ^0.6.0\n        \n            passport-jwt : ^4.0.0\n        \n            passport-local : ^1.0.0\n        \n            reflect-metadata : ^0.1.13\n        \n            rimraf : ^3.0.2\n        \n            rxjs : ^7.2.0\n        \n            uuid : ^9.0.0\n    \n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            Role   (src/.../role.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/enums/role.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        Role\n                    \n                \n                        \n                            \n                                 User\n                            \n                        \n                        \n                            \n                                Value : user\n                            \n                        \n                        \n                            \n                                 Admin\n                            \n                        \n                        \n                            \n                                Value : admin\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        bootstrap\n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n\n\n  A progressive Node.js framework for building efficient and scalable server-side applications.\n    \n\n\n\n\n\n\n\n\n  \n    \n  \n\n  \n\nDescription\nNest framework TypeScript starter repository.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# e2e tests\n$ npm run test:e2e\n\n# test coverage\n$ npm run test:covSupport\nNest is an MIT-licensed open source project. It can grow thanks to the sponsors and support by the amazing backers. If you'd like to join them, please read more here.\nStay in touch\n\nAuthor - Kamil Myśliwiec\nWebsite - https://nestjs.com\nTwitter - @nestframework\n\nLicense\nNest is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EatingPlanModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        RecipeModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ShoppingListModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UserModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\ndependencies\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_exports\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_EatingPlanModule\n\n\n\ncluster_EatingPlanModule_exports\n\n\n\ncluster_EatingPlanModule_providers\n\n\n\ncluster_RecipeModule\n\n\n\ncluster_RecipeModule_exports\n\n\n\ncluster_RecipeModule_providers\n\n\n\ncluster_ShoppingListModule\n\n\n\ncluster_ShoppingListModule_exports\n\n\n\ncluster_ShoppingListModule_providers\n\n\n\ncluster_UserModule\n\n\n\ncluster_UserModule_exports\n\n\n\ncluster_UserModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nAuthService \n\nAuthService \n\nAuthService  -->\n\nAuthModule->AuthService \n\n\n\n\n\nEatingPlanModule\n\nEatingPlanModule\n\nAppModule -->\n\nEatingPlanModule->AppModule\n\n\n\n\n\nEatingPlanService \n\nEatingPlanService \n\nEatingPlanService  -->\n\nEatingPlanModule->EatingPlanService \n\n\n\n\n\nRecipeModule\n\nRecipeModule\n\nEatingPlanModule -->\n\nRecipeModule->EatingPlanModule\n\n\n\nAppModule -->\n\nRecipeModule->AppModule\n\n\n\n\n\nRecipeService \n\nRecipeService \n\nRecipeService  -->\n\nRecipeModule->RecipeService \n\n\n\n\n\nUserModule\n\nUserModule\n\nAppModule -->\n\nUserModule->AppModule\n\n\n\n\n\nUserService \n\nUserService \n\nUserService  -->\n\nUserModule->UserService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nEatingPlanService\n\nEatingPlanService\n\nEatingPlanModule -->\n\nEatingPlanService->EatingPlanModule\n\n\n\n\n\nRecipeService\n\nRecipeService\n\nRecipeModule -->\n\nRecipeService->RecipeModule\n\n\n\n\n\nShoppingListService \n\nShoppingListService \n\n\n\nShoppingListModule\n\nShoppingListModule\n\nUserModule -->\n\nShoppingListModule->UserModule\n\n\n\nShoppingListService  -->\n\nShoppingListModule->ShoppingListService \n\n\n\n\n\nShoppingListService\n\nShoppingListService\n\nShoppingListModule -->\n\nShoppingListService->ShoppingListModule\n\n\n\n\n\nUserService\n\nUserService\n\nUserModule -->\n\nUserService->UserModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    24 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Guard\n                \n            \n        \n        \n            \n                \n                    \n                    2 Interfaces\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"properties.html":{"url":"properties.html","title":"package-properties - properties","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Properties\n    \n    \n        \n            Version : 0.0.1\n        \n            Description : \n        \n            License : UNLICENSED\n        \n            Author : \n    \n\n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EatingPlanDocument   (src/.../eating-plan.schema.ts)\n                        \n                        \n                            IngredientDocument   (src/.../ingredient.schema.ts)\n                        \n                        \n                            MealDocument   (src/.../meal.schema.ts)\n                        \n                        \n                            RecipeDocument   (src/.../recipe.schema.ts)\n                        \n                        \n                            ShoppingListDocument   (src/.../shopping-list.schema.ts)\n                        \n                        \n                            UserDocument   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/eating-plan/schemas/eating-plan.schema.ts\n    \n    \n        \n            \n                \n                    \n                    EatingPlanDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/recipe/schemas/ingredient.schema.ts\n    \n    \n        \n            \n                \n                    \n                    IngredientDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/eating-plan/schemas/meal.schema.ts\n    \n    \n        \n            \n                \n                    \n                    MealDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/recipe/schemas/recipe.schema.ts\n    \n    \n        \n            \n                \n                    \n                    RecipeDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/shopping-list/schemas/shopping-list.schema.ts\n    \n    \n        \n            \n                \n                    \n                    ShoppingListDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n    src/user/schemas/user.schema.ts\n    \n    \n        \n            \n                \n                    \n                    UserDocument\n                \n            \n            \n                \n                        \n\n                \n            \n        \n    \n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrentUser   (src/.../current-user.decorator.ts)\n                        \n                        \n                            EatingPlanSchema   (src/.../eating-plan.schema.ts)\n                        \n                        \n                            IngredientSchema   (src/.../ingredient.schema.ts)\n                        \n                        \n                            MealSchema   (src/.../meal.schema.ts)\n                        \n                        \n                            RecipeSchema   (src/.../recipe.schema.ts)\n                        \n                        \n                            Roles   (src/.../roles.decorator.ts)\n                        \n                        \n                            ShoppingListSchema   (src/.../shopping-list.schema.ts)\n                        \n                        \n                            UserSchema   (src/.../user.schema.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/auth/decorators/current-user.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        CurrentUser\n                        \n                    \n                \n            \n                \n                    \n                        Default value : createParamDecorator(\n  (data: unknown, context: ExecutionContext) => {\n    const ctx = GqlExecutionContext.create(context);\n    return ctx.getContext().req.user;\n  },\n)\n                    \n                \n\n\n        \n    \n\n    src/eating-plan/schemas/eating-plan.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        EatingPlanSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(EatingPlan)\n                    \n                \n\n\n        \n    \n\n    src/recipe/schemas/ingredient.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        IngredientSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Ingredient)\n                    \n                \n\n\n        \n    \n\n    src/eating-plan/schemas/meal.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        MealSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Meal)\n                    \n                \n\n\n        \n    \n\n    src/recipe/schemas/recipe.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        RecipeSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(Recipe)\n                    \n                \n\n\n        \n    \n\n    src/auth/decorators/roles.decorator.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        Roles\n                        \n                    \n                \n            \n                \n                    \n                        Default value : (...roles: Role[]) => SetMetadata('roles', roles)\n                    \n                \n\n\n        \n    \n\n    src/shopping-list/schemas/shopping-list.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        ShoppingListSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(ShoppingList)\n                    \n                \n\n\n        \n    \n\n    src/user/schemas/user.schema.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        UserSchema\n                        \n                    \n                \n            \n                \n                    \n                        Default value : SchemaFactory.createForClass(User)\n                    \n                \n\n\n        \n    \n\n\n\n\n                   \n    \n         results matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
